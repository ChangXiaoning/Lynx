{"8":[19,7,19,24],"9":[1,16,1,23],"10":[19,7,19,24],"16":[26,36,26,80],"17":[1,24,1,36],"18":[26,11,26,31],"24":[26,11,26,81],"25":[1,16,1,37],"26":[26,47,26,80],"32":[26,9,26,82],"33":[2,15,2,22],"34":[26,9,26,82],"41":[2,23,2,39],"49":[2,15,2,40],"57":[3,16,3,23],"65":[3,24,3,41],"73":[3,16,3,42],"81":[1,16,1,37],"89":[1,16,1,37],"97":[2,15,2,40],"105":[2,15,2,40],"113":[3,16,3,42],"121":[3,16,3,42],"129":[6,19,6,25],"137":[6,19,6,35],"145":[6,19,6,35],"153":[6,19,6,35],"161":[9,22,9,33],"169":[9,22,9,48],"177":[9,22,9,48],"185":[9,22,9,48],"193":[19,8,19,16],"201":[19,17,19,23],"209":[19,8,19,24],"217":[20,12,20,24],"225":[20,25,20,31],"233":[20,12,20,32],"241":[20,12,20,32],"249":[20,5,20,33],"257":[22,17,22,28],"265":[22,29,22,35],"273":[22,17,22,36],"281":[23,12,23,14],"289":[22,17,22,36],"297":[22,17,22,36],"305":[23,12,23,14],"313":[23,12,23,14],"321":[25,19,25,25],"329":[26,11,26,14],"337":[26,18,26,31],"345":[26,36,26,43],"353":[26,48,26,62],"361":[26,68,26,74],"369":[26,76,26,79],"377":[26,48,26,80],"379":[26,48,26,67],"385":[27,7,27,13],"393":[27,19,27,22],"401":[27,7,27,23],"403":[27,7,27,18],"409":[27,7,27,24],"417":[25,19,25,25],"425":[25,3,29,4],"433":[25,3,29,4],"441":[30,10,30,16],"449":[30,10,30,16],"457":[30,3,30,17],"465":[18,1,31,2],"473":[18,1,31,2],"481":[18,1,31,2],"489":[18,1,31,2],"497":[18,1,31,2],"505":[18,1,31,2],"513":[33,1,33,7],"521":[33,18,33,28],"529":[33,1,33,28],"537":[33,1,33,29],"545":[1,1,33,29],"553":[1,1,33,29],"561":[1,1,33,29],"569":[1,1,33,29],"577":[1,1,33,29],"585":[1,1,33,29],"593":[18,1,31,2],"601":[1,1,33,29],"609":[19,3,21,4],"617":[26,5,28,6],"625":[18,1,31,2],"633":[18,1,31,2],"641":[1,1,33,29],"649":[1,1,33,29],"nBranches":8,"originalCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/_baseKeysIn.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/_baseKeysIn_jalangi_.js","code":"var isObject = require('./isObject'),\n    isPrototype = require('./_isPrototype'),\n    nativeKeysIn = require('./_nativeKeysIn');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeysIn;\n"}