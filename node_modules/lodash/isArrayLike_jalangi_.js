J$.iids = {"8":[30,10,30,49],"9":[1,18,1,25],"10":[30,10,30,23],"16":[30,10,30,71],"17":[1,26,1,40],"18":[30,53,30,71],"25":[1,18,1,41],"33":[2,12,2,19],"41":[2,20,2,32],"49":[2,12,2,33],"57":[1,18,1,41],"65":[1,18,1,41],"73":[2,12,2,33],"81":[2,12,2,33],"89":[30,10,30,15],"97":[30,19,30,23],"105":[30,27,30,35],"113":[30,36,30,41],"121":[30,36,30,48],"129":[30,27,30,49],"137":[30,54,30,64],"145":[30,65,30,70],"153":[30,54,30,71],"161":[30,10,30,71],"169":[30,3,30,72],"177":[29,1,31,2],"185":[29,1,31,2],"193":[29,1,31,2],"201":[33,1,33,7],"209":[33,18,33,29],"217":[33,1,33,29],"225":[33,1,33,30],"233":[1,1,33,30],"241":[1,1,33,30],"249":[1,1,33,30],"257":[29,1,31,2],"265":[1,1,33,30],"273":[29,1,31,2],"281":[29,1,31,2],"289":[1,1,33,30],"297":[1,1,33,30],"nBranches":4,"originalCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/isArrayLike.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/isArrayLike_jalangi_.js","code":"var isFunction = require('./isFunction'),\n    isLength = require('./isLength');\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n"};
jalangiLabel574:
    while (true) {
        try {
            J$.Se(233, '/home/james/nodejs/HiPar/node_modules/lodash/isArrayLike_jalangi_.js', '/home/james/nodejs/HiPar/node_modules/lodash/isArrayLike.js');
            function isArrayLike(value) {
                jalangiLabel573:
                    while (true) {
                        try {
                            J$.Fe(177, arguments.callee, this, arguments);
                            arguments = J$.N(185, 'arguments', arguments, 4);
                            value = J$.N(193, 'value', value, 4);
                            return J$.X1(169, J$.Rt(161, J$.C(16, J$.C(8, J$.B(10, '!=', J$.R(89, 'value', value, 0), J$.T(97, null, 25, false), 0)) ? J$.F(129, J$.R(105, 'isLength', isLength, 1), 0)(J$.G(121, J$.R(113, 'value', value, 0), 'length', 0)) : J$._()) ? J$.U(18, '!', J$.F(153, J$.R(137, 'isFunction', isFunction, 1), 0)(J$.R(145, 'value', value, 0))) : J$._()));
                        } catch (J$e) {
                            J$.Ex(273, J$e);
                        } finally {
                            if (J$.Fr(281))
                                continue jalangiLabel573;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(241, 'isFunction', isFunction, 0);
            J$.N(249, 'isLength', isLength, 0);
            isArrayLike = J$.N(265, 'isArrayLike', J$.T(257, isArrayLike, 12, false, 177), 0);
            var isFunction = J$.X1(65, J$.W(57, 'isFunction', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, './isFunction', 21, false)), isFunction, 3)), isLength = J$.X1(81, J$.W(73, 'isLength', J$.F(49, J$.R(33, 'require', require, 2), 0)(J$.T(41, './isLength', 21, false)), isLength, 3));
            J$.X1(225, J$.P(217, J$.R(201, 'module', module, 2), 'exports', J$.R(209, 'isArrayLike', isArrayLike, 1), 0));
        } catch (J$e) {
            J$.Ex(289, J$e);
        } finally {
            if (J$.Sr(297)) {
                J$.L();
                continue jalangiLabel574;
            } else {
                J$.L();
                break jalangiLabel574;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
