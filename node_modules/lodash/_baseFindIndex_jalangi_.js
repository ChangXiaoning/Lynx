J$.iids = {"8":[14,24,14,33],"9":[13,16,13,21],"10":[14,40,14,42],"16":[16,10,16,19],"17":[13,16,13,28],"18":[14,11,14,43],"24":[17,9,17,46],"25":[14,11,14,20],"26":[16,22,16,29],"32":[16,10,16,48],"33":[14,24,14,33],"41":[14,36,14,37],"42":[16,22,16,29],"49":[14,41,14,42],"50":[16,32,16,39],"57":[13,16,13,28],"65":[13,16,13,28],"66":[16,32,16,48],"73":[14,11,14,43],"74":[21,10,21,12],"81":[14,11,14,43],"89":[16,10,16,19],"105":[16,22,16,27],"113":[16,22,16,29],"137":[16,34,16,39],"145":[16,32,16,39],"153":[16,42,16,48],"161":[17,9,17,18],"169":[17,19,17,24],"177":[17,25,17,30],"185":[17,19,17,31],"193":[17,33,17,38],"201":[17,40,17,45],"209":[17,9,17,46],"217":[18,14,18,19],"225":[18,14,18,19],"233":[18,7,18,20],"241":[21,11,21,12],"249":[21,10,21,12],"257":[21,3,21,13],"265":[12,1,22,2],"273":[12,1,22,2],"281":[12,1,22,2],"289":[12,1,22,2],"297":[12,1,22,2],"305":[12,1,22,2],"313":[12,1,22,2],"321":[12,1,22,2],"329":[24,1,24,7],"337":[24,18,24,31],"345":[24,1,24,31],"353":[24,1,24,32],"361":[1,1,24,32],"369":[12,1,22,2],"377":[1,1,24,32],"385":[14,24,14,42],"393":[16,10,16,48],"401":[17,5,19,6],"409":[16,3,20,4],"417":[12,1,22,2],"425":[12,1,22,2],"433":[1,1,24,32],"441":[1,1,24,32],"nBranches":8,"originalCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/_baseFindIndex.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/_baseFindIndex_jalangi_.js","code":"/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseFindIndex;\n"};
jalangiLabel658:
    while (true) {
        try {
            J$.Se(361, '/home/james/nodejs/HiPar/node_modules/lodash/_baseFindIndex_jalangi_.js', '/home/james/nodejs/HiPar/node_modules/lodash/_baseFindIndex.js');
            function baseFindIndex(array, predicate, fromIndex, fromRight) {
                jalangiLabel657:
                    while (true) {
                        try {
                            J$.Fe(265, arguments.callee, this, arguments);
                            arguments = J$.N(273, 'arguments', arguments, 4);
                            array = J$.N(281, 'array', array, 4);
                            predicate = J$.N(289, 'predicate', predicate, 4);
                            fromIndex = J$.N(297, 'fromIndex', fromIndex, 4);
                            fromRight = J$.N(305, 'fromRight', fromRight, 4);
                            J$.N(313, 'length', length, 0);
                            J$.N(321, 'index', index, 0);
                            var length = J$.X1(65, J$.W(57, 'length', J$.G(17, J$.R(9, 'array', array, 0), 'length', 0), length, 1)), index = J$.X1(81, J$.W(73, 'index', J$.B(18, '+', J$.R(25, 'fromIndex', fromIndex, 0), J$.X1(385, J$.C(8, J$.R(33, 'fromRight', fromRight, 0))) ? J$.T(41, 1, 22, false) : J$.U(10, '-', J$.T(49, 1, 22, false)), 0), index, 1));
                            while (J$.X1(409, J$.C(32, J$.X1(393, J$.C(16, J$.R(89, 'fromRight', fromRight, 0))) ? J$.B(42, '+', index = J$.W(113, 'index', J$.B(34, '-', J$.U(26, '+', J$.R(105, 'index', index, 0)), J$.T(97, 1, 22, false), 0), index, 0), J$.T(121, 1, 22, false), 0) : J$.B(66, '<', index = J$.W(145, 'index', J$.B(58, '+', J$.U(50, '+', J$.R(137, 'index', index, 0)), J$.T(129, 1, 22, false), 0), index, 0), J$.R(153, 'length', length, 0), 0)))) {
                                if (J$.X1(401, J$.C(24, J$.F(209, J$.R(161, 'predicate', predicate, 0), 0)(J$.G(185, J$.R(169, 'array', array, 0), J$.R(177, 'index', index, 0), 4), J$.R(193, 'index', index, 0), J$.R(201, 'array', array, 0))))) {
                                    return J$.X1(233, J$.Rt(225, J$.R(217, 'index', index, 0)));
                                }
                            }
                            return J$.X1(257, J$.Rt(249, J$.U(74, '-', J$.T(241, 1, 22, false))));
                        } catch (J$e) {
                            J$.Ex(417, J$e);
                        } finally {
                            if (J$.Fr(425))
                                continue jalangiLabel657;
                            else
                                return J$.Ra();
                        }
                    }
            }
            baseFindIndex = J$.N(377, 'baseFindIndex', J$.T(369, baseFindIndex, 12, false, 265), 0);
            J$.X1(353, J$.P(345, J$.R(329, 'module', module, 2), 'exports', J$.R(337, 'baseFindIndex', baseFindIndex, 1), 0));
        } catch (J$e) {
            J$.Ex(433, J$e);
        } finally {
            if (J$.Sr(441)) {
                J$.L();
                continue jalangiLabel658;
            } else {
                J$.L();
                break jalangiLabel658;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
