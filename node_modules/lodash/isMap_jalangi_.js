J$.iids = {"8":[6,17,6,43],"9":[1,17,1,24],"16":[25,13,25,22],"17":[1,25,1,39],"25":[1,17,1,40],"33":[2,13,2,20],"41":[2,21,2,35],"49":[2,13,2,36],"57":[3,12,3,19],"65":[3,20,3,33],"73":[3,12,3,34],"81":[1,17,1,40],"89":[1,17,1,40],"97":[2,13,2,36],"105":[2,13,2,36],"113":[3,12,3,34],"121":[3,12,3,34],"129":[6,17,6,25],"137":[6,29,6,37],"145":[6,29,6,43],"153":[6,17,6,43],"161":[6,17,6,43],"169":[25,13,25,22],"177":[25,25,25,34],"185":[25,35,25,44],"193":[25,25,25,45],"201":[25,48,25,57],"209":[25,13,25,57],"217":[25,13,25,57],"225":[27,1,27,7],"233":[27,18,27,23],"241":[27,1,27,23],"249":[27,1,27,24],"257":[1,1,27,24],"265":[1,1,27,24],"273":[1,1,27,24],"281":[1,1,27,24],"289":[1,1,27,24],"297":[1,1,27,24],"305":[25,13,25,57],"313":[1,1,27,24],"321":[1,1,27,24],"nBranches":4,"originalCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/isMap.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/isMap_jalangi_.js","code":"var baseIsMap = require('./_baseIsMap'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsMap = nodeUtil && nodeUtil.isMap;\n\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */\nvar isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\nmodule.exports = isMap;\n"};
jalangiLabel637:
    while (true) {
        try {
            J$.Se(257, '/home/james/nodejs/HiPar/node_modules/lodash/isMap_jalangi_.js', '/home/james/nodejs/HiPar/node_modules/lodash/isMap.js');
            J$.N(265, 'baseIsMap', baseIsMap, 0);
            J$.N(273, 'baseUnary', baseUnary, 0);
            J$.N(281, 'nodeUtil', nodeUtil, 0);
            J$.N(289, 'nodeIsMap', nodeIsMap, 0);
            J$.N(297, 'isMap', isMap, 0);
            var baseIsMap = J$.X1(89, J$.W(81, 'baseIsMap', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, './_baseIsMap', 21, false)), baseIsMap, 3)), baseUnary = J$.X1(105, J$.W(97, 'baseUnary', J$.F(49, J$.R(33, 'require', require, 2), 0)(J$.T(41, './_baseUnary', 21, false)), baseUnary, 3)), nodeUtil = J$.X1(121, J$.W(113, 'nodeUtil', J$.F(73, J$.R(57, 'require', require, 2), 0)(J$.T(65, './_nodeUtil', 21, false)), nodeUtil, 3));
            var nodeIsMap = J$.X1(161, J$.W(153, 'nodeIsMap', J$.C(8, J$.R(129, 'nodeUtil', nodeUtil, 1)) ? J$.G(145, J$.R(137, 'nodeUtil', nodeUtil, 1), 'isMap', 0) : J$._(), nodeIsMap, 3));
            var isMap = J$.X1(217, J$.W(209, 'isMap', J$.X1(305, J$.C(16, J$.R(169, 'nodeIsMap', nodeIsMap, 1))) ? J$.F(193, J$.R(177, 'baseUnary', baseUnary, 1), 0)(J$.R(185, 'nodeIsMap', nodeIsMap, 1)) : J$.R(201, 'baseIsMap', baseIsMap, 1), isMap, 3));
            J$.X1(249, J$.P(241, J$.R(225, 'module', module, 2), 'exports', J$.R(233, 'isMap', isMap, 1), 0));
        } catch (J$e) {
            J$.Ex(313, J$e);
        } finally {
            if (J$.Sr(321)) {
                J$.L();
                continue jalangiLabel637;
            } else {
                J$.L();
                break jalangiLabel637;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
