J$.iids = {"8":[6,24,6,57],"9":[1,24,1,31],"16":[25,20,25,36],"17":[1,32,1,53],"25":[1,24,1,54],"33":[2,13,2,20],"41":[2,21,2,35],"49":[2,13,2,36],"57":[3,12,3,19],"65":[3,20,3,33],"73":[3,12,3,34],"81":[1,24,1,54],"89":[1,24,1,54],"97":[2,13,2,36],"105":[2,13,2,36],"113":[3,12,3,34],"121":[3,12,3,34],"129":[6,24,6,32],"137":[6,36,6,44],"145":[6,36,6,57],"153":[6,24,6,57],"161":[6,24,6,57],"169":[25,20,25,36],"177":[25,39,25,48],"185":[25,49,25,65],"193":[25,39,25,66],"201":[25,69,25,85],"209":[25,20,25,85],"217":[25,20,25,85],"225":[27,1,27,7],"233":[27,18,27,30],"241":[27,1,27,30],"249":[27,1,27,31],"257":[1,1,27,31],"265":[1,1,27,31],"273":[1,1,27,31],"281":[1,1,27,31],"289":[1,1,27,31],"297":[1,1,27,31],"305":[25,20,25,85],"313":[1,1,27,31],"321":[1,1,27,31],"nBranches":4,"originalCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/isTypedArray.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/isTypedArray_jalangi_.js","code":"var baseIsTypedArray = require('./_baseIsTypedArray'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n"};
jalangiLabel563:
    while (true) {
        try {
            J$.Se(257, '/home/james/nodejs/HiPar/node_modules/lodash/isTypedArray_jalangi_.js', '/home/james/nodejs/HiPar/node_modules/lodash/isTypedArray.js');
            J$.N(265, 'baseIsTypedArray', baseIsTypedArray, 0);
            J$.N(273, 'baseUnary', baseUnary, 0);
            J$.N(281, 'nodeUtil', nodeUtil, 0);
            J$.N(289, 'nodeIsTypedArray', nodeIsTypedArray, 0);
            J$.N(297, 'isTypedArray', isTypedArray, 0);
            var baseIsTypedArray = J$.X1(89, J$.W(81, 'baseIsTypedArray', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, './_baseIsTypedArray', 21, false)), baseIsTypedArray, 3)), baseUnary = J$.X1(105, J$.W(97, 'baseUnary', J$.F(49, J$.R(33, 'require', require, 2), 0)(J$.T(41, './_baseUnary', 21, false)), baseUnary, 3)), nodeUtil = J$.X1(121, J$.W(113, 'nodeUtil', J$.F(73, J$.R(57, 'require', require, 2), 0)(J$.T(65, './_nodeUtil', 21, false)), nodeUtil, 3));
            var nodeIsTypedArray = J$.X1(161, J$.W(153, 'nodeIsTypedArray', J$.C(8, J$.R(129, 'nodeUtil', nodeUtil, 1)) ? J$.G(145, J$.R(137, 'nodeUtil', nodeUtil, 1), 'isTypedArray', 0) : J$._(), nodeIsTypedArray, 3));
            var isTypedArray = J$.X1(217, J$.W(209, 'isTypedArray', J$.X1(305, J$.C(16, J$.R(169, 'nodeIsTypedArray', nodeIsTypedArray, 1))) ? J$.F(193, J$.R(177, 'baseUnary', baseUnary, 1), 0)(J$.R(185, 'nodeIsTypedArray', nodeIsTypedArray, 1)) : J$.R(201, 'baseIsTypedArray', baseIsTypedArray, 1), isTypedArray, 3));
            J$.X1(249, J$.P(241, J$.R(225, 'module', module, 2), 'exports', J$.R(233, 'isTypedArray', isTypedArray, 1), 0));
        } catch (J$e) {
            J$.Ex(313, J$e);
        } finally {
            if (J$.Sr(321)) {
                J$.L();
                continue jalangiLabel563;
            } else {
                J$.L();
                break jalangiLabel563;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
