J$.iids = {"8":[15,10,15,56],"9":[1,14,1,21],"10":[15,33,15,56],"17":[1,22,1,33],"25":[1,14,1,34],"33":[2,16,2,23],"41":[2,24,2,40],"49":[2,16,2,41],"57":[1,14,1,34],"65":[1,14,1,34],"73":[2,16,2,41],"81":[2,16,2,41],"89":[5,14,5,28],"97":[5,14,5,28],"105":[5,14,5,28],"113":[15,10,15,22],"121":[15,23,15,28],"129":[15,10,15,29],"137":[15,33,15,39],"145":[15,40,15,45],"153":[15,33,15,46],"161":[15,50,15,56],"169":[15,10,15,56],"177":[15,3,15,57],"185":[14,1,16,2],"193":[14,1,16,2],"201":[14,1,16,2],"209":[18,1,18,7],"217":[18,18,18,27],"225":[18,1,18,27],"233":[18,1,18,28],"241":[1,1,18,28],"249":[1,1,18,28],"257":[1,1,18,28],"265":[1,1,18,28],"273":[14,1,16,2],"281":[1,1,18,28],"289":[14,1,16,2],"297":[14,1,16,2],"305":[1,1,18,28],"313":[1,1,18,28],"nBranches":2,"originalCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/_baseIsSet.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/_baseIsSet_jalangi_.js","code":"var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar setTag = '[object Set]';\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\nmodule.exports = baseIsSet;\n"};
jalangiLabel642:
    while (true) {
        try {
            J$.Se(241, '/home/james/nodejs/HiPar/node_modules/lodash/_baseIsSet_jalangi_.js', '/home/james/nodejs/HiPar/node_modules/lodash/_baseIsSet.js');
            function baseIsSet(value) {
                jalangiLabel641:
                    while (true) {
                        try {
                            J$.Fe(185, arguments.callee, this, arguments);
                            arguments = J$.N(193, 'arguments', arguments, 4);
                            value = J$.N(201, 'value', value, 4);
                            return J$.X1(177, J$.Rt(169, J$.C(8, J$.F(129, J$.R(113, 'isObjectLike', isObjectLike, 1), 0)(J$.R(121, 'value', value, 0))) ? J$.B(10, '==', J$.F(153, J$.R(137, 'getTag', getTag, 1), 0)(J$.R(145, 'value', value, 0)), J$.R(161, 'setTag', setTag, 1), 0) : J$._()));
                        } catch (J$e) {
                            J$.Ex(289, J$e);
                        } finally {
                            if (J$.Fr(297))
                                continue jalangiLabel641;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(249, 'getTag', getTag, 0);
            J$.N(257, 'isObjectLike', isObjectLike, 0);
            J$.N(265, 'setTag', setTag, 0);
            baseIsSet = J$.N(281, 'baseIsSet', J$.T(273, baseIsSet, 12, false, 185), 0);
            var getTag = J$.X1(65, J$.W(57, 'getTag', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, './_getTag', 21, false)), getTag, 3)), isObjectLike = J$.X1(81, J$.W(73, 'isObjectLike', J$.F(49, J$.R(33, 'require', require, 2), 0)(J$.T(41, './isObjectLike', 21, false)), isObjectLike, 3));
            var setTag = J$.X1(105, J$.W(97, 'setTag', J$.T(89, '[object Set]', 21, false), setTag, 3));
            J$.X1(233, J$.P(225, J$.R(209, 'module', module, 2), 'exports', J$.R(217, 'baseIsSet', baseIsSet, 1), 0));
        } catch (J$e) {
            J$.Ex(305, J$e);
        } finally {
            if (J$.Sr(313)) {
                J$.L();
                continue jalangiLabel642;
            } else {
                J$.L();
                break jalangiLabel642;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
