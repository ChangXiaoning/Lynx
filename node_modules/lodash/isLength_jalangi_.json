{"8":[31,10,32,13],"9":[2,24,2,40],"10":[31,10,31,22],"16":[31,10,32,31],"17":[2,24,2,40],"18":[31,10,31,34],"24":[31,10,32,60],"25":[2,24,2,40],"26":[32,11,32,13],"33":[31,17,31,22],"34":[32,3,32,13],"41":[31,26,31,34],"42":[32,17,32,26],"49":[32,3,32,8],"50":[32,17,32,31],"57":[32,12,32,13],"58":[32,35,32,60],"65":[32,17,32,22],"73":[32,25,32,26],"81":[32,30,32,31],"89":[32,35,32,40],"97":[32,44,32,60],"105":[31,10,32,60],"113":[31,3,32,61],"121":[30,1,33,2],"129":[30,1,33,2],"137":[30,1,33,2],"145":[35,1,35,7],"153":[35,18,35,26],"161":[35,1,35,26],"169":[35,1,35,27],"177":[1,1,35,27],"185":[1,1,35,27],"193":[30,1,33,2],"201":[1,1,35,27],"209":[30,1,33,2],"217":[30,1,33,2],"225":[1,1,35,27],"233":[1,1,35,27],"nBranches":6,"originalCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/isLength.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/isLength_jalangi_.js","code":"/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n"}