J$.iids = {"9":[1,17,1,24],"17":[1,25,1,39],"25":[1,17,1,40],"33":[1,17,1,40],"41":[1,17,1,40],"49":[4,26,4,27],"57":[4,26,4,27],"65":[4,26,4,27],"73":[33,10,33,19],"81":[33,20,33,25],"89":[33,27,33,45],"97":[33,10,33,46],"105":[33,10,33,46],"113":[33,3,33,47],"121":[32,1,34,2],"129":[32,1,34,2],"137":[32,1,34,2],"145":[36,1,36,7],"153":[36,18,36,23],"161":[36,1,36,23],"169":[36,1,36,24],"177":[1,1,36,24],"185":[1,1,36,24],"193":[1,1,36,24],"201":[32,1,34,2],"209":[1,1,36,24],"217":[32,1,34,2],"225":[32,1,34,2],"233":[1,1,36,24],"241":[1,1,36,24],"nBranches":0,"originalCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/clone.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/clone_jalangi_.js","code":"var baseClone = require('./_baseClone');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nmodule.exports = clone;\n"};
jalangiLabel446:
    while (true) {
        try {
            J$.Se(177, '/home/james/nodejs/HiPar/node_modules/lodash/clone_jalangi_.js', '/home/james/nodejs/HiPar/node_modules/lodash/clone.js');
            function clone(value) {
                jalangiLabel445:
                    while (true) {
                        try {
                            J$.Fe(121, arguments.callee, this, arguments);
                            arguments = J$.N(129, 'arguments', arguments, 4);
                            value = J$.N(137, 'value', value, 4);
                            return J$.X1(113, J$.Rt(105, J$.F(97, J$.R(73, 'baseClone', baseClone, 1), 0)(J$.R(81, 'value', value, 0), J$.R(89, 'CLONE_SYMBOLS_FLAG', CLONE_SYMBOLS_FLAG, 1))));
                        } catch (J$e) {
                            J$.Ex(217, J$e);
                        } finally {
                            if (J$.Fr(225))
                                continue jalangiLabel445;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(185, 'baseClone', baseClone, 0);
            J$.N(193, 'CLONE_SYMBOLS_FLAG', CLONE_SYMBOLS_FLAG, 0);
            clone = J$.N(209, 'clone', J$.T(201, clone, 12, false, 121), 0);
            var baseClone = J$.X1(41, J$.W(33, 'baseClone', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, './_baseClone', 21, false)), baseClone, 3));
            var CLONE_SYMBOLS_FLAG = J$.X1(65, J$.W(57, 'CLONE_SYMBOLS_FLAG', J$.T(49, 4, 22, false), CLONE_SYMBOLS_FLAG, 3));
            J$.X1(169, J$.P(161, J$.R(145, 'module', module, 2), 'exports', J$.R(153, 'clone', clone, 1), 0));
        } catch (J$e) {
            J$.Ex(233, J$e);
        } finally {
            if (J$.Sr(241)) {
                J$.L();
                continue jalangiLabel446;
            } else {
                J$.L();
                break jalangiLabel446;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
