J$.iids = {"8":[56,12,57,27],"9":[1,18,1,25],"10":[57,32,57,66],"16":[56,12,57,66],"17":[1,26,1,41],"18":[57,31,57,66],"25":[1,18,1,42],"33":[2,12,2,19],"41":[2,20,2,32],"49":[2,12,2,33],"57":[3,16,3,23],"65":[3,24,3,40],"73":[3,16,3,41],"81":[1,18,1,42],"89":[1,18,1,42],"97":[2,12,2,33],"105":[2,12,2,33],"113":[3,16,3,41],"121":[3,16,3,41],"129":[6,15,6,35],"137":[7,12,7,28],"145":[8,11,8,29],"153":[9,11,9,26],"161":[10,12,10,28],"169":[11,11,11,30],"177":[12,10,12,24],"185":[13,13,13,30],"193":[14,13,14,30],"201":[15,13,15,30],"209":[16,10,16,24],"217":[17,13,17,30],"225":[18,14,18,32],"233":[6,15,6,35],"241":[6,15,6,35],"249":[7,12,7,28],"257":[7,12,7,28],"265":[8,11,8,29],"273":[8,11,8,29],"281":[9,11,9,26],"289":[9,11,9,26],"297":[10,12,10,28],"305":[10,12,10,28],"313":[11,11,11,30],"321":[11,11,11,30],"329":[12,10,12,24],"337":[12,10,12,24],"345":[13,13,13,30],"353":[13,13,13,30],"361":[14,13,14,30],"369":[14,13,14,30],"377":[15,13,15,30],"385":[15,13,15,30],"393":[16,10,16,24],"401":[16,10,16,24],"409":[17,13,17,30],"417":[17,13,17,30],"425":[18,14,18,32],"433":[18,14,18,32],"441":[20,22,20,44],"449":[21,15,21,34],"457":[22,14,22,37],"465":[23,14,23,37],"473":[24,11,24,31],"481":[25,12,25,33],"489":[26,12,26,33],"497":[27,12,27,33],"505":[28,19,28,47],"513":[29,13,29,35],"521":[30,13,30,35],"529":[20,22,20,44],"537":[20,22,20,44],"545":[21,15,21,34],"553":[21,15,21,34],"561":[22,14,22,37],"569":[22,14,22,37],"577":[23,14,23,37],"585":[23,14,23,37],"593":[24,11,24,31],"601":[24,11,24,31],"609":[25,12,25,33],"617":[25,12,25,33],"625":[26,12,26,33],"633":[26,12,26,33],"641":[27,12,27,33],"649":[27,12,27,33],"657":[28,19,28,47],"665":[28,19,28,47],"673":[29,13,29,35],"681":[29,13,29,35],"689":[30,13,30,35],"697":[30,13,30,35],"705":[33,22,33,24],"713":[33,22,33,24],"721":[33,22,33,24],"729":[34,1,34,15],"737":[34,16,34,26],"745":[34,30,34,44],"753":[34,45,34,55],"761":[35,1,35,15],"769":[35,16,35,23],"777":[35,27,35,41],"785":[35,42,35,50],"793":[36,1,36,15],"801":[36,16,36,24],"809":[36,28,36,42],"817":[36,43,36,51],"825":[37,1,37,15],"833":[37,16,37,31],"841":[37,35,37,49],"849":[37,50,37,59],"857":[38,1,38,15],"865":[38,16,38,25],"873":[38,29,38,33],"881":[38,1,38,33],"889":[37,35,38,33],"897":[37,1,38,33],"905":[36,28,38,33],"913":[36,1,38,33],"921":[35,27,38,33],"929":[35,1,38,33],"937":[34,30,38,33],"945":[34,1,38,33],"953":[34,1,38,34],"961":[39,1,39,15],"969":[39,16,39,23],"977":[39,27,39,41],"985":[39,42,39,50],"993":[40,1,40,15],"1001":[40,16,40,30],"1009":[40,34,40,48],"1017":[40,49,40,56],"1025":[41,1,41,15],"1033":[41,16,41,27],"1041":[41,31,41,45],"1049":[41,46,41,53],"1057":[42,1,42,15],"1065":[42,16,42,24],"1073":[42,28,42,42],"1081":[42,43,42,50],"1089":[43,1,43,15],"1097":[43,16,43,22],"1105":[43,26,43,40],"1113":[43,41,43,50],"1121":[44,1,44,15],"1129":[44,16,44,25],"1137":[44,29,44,43],"1145":[44,44,44,53],"1153":[45,1,45,15],"1161":[45,16,45,22],"1169":[45,26,45,40],"1177":[45,41,45,50],"1185":[46,1,46,15],"1193":[46,16,46,26],"1201":[46,30,46,35],"1209":[46,1,46,35],"1217":[45,26,46,35],"1225":[45,1,46,35],"1233":[44,29,46,35],"1241":[44,1,46,35],"1249":[43,26,46,35],"1257":[43,1,46,35],"1265":[42,28,46,35],"1273":[42,1,46,35],"1281":[41,31,46,35],"1289":[41,1,46,35],"1297":[40,34,46,35],"1305":[40,1,46,35],"1313":[39,27,46,35],"1321":[39,1,46,35],"1329":[39,1,46,36],"1337":[56,12,56,24],"1345":[56,25,56,30],"1353":[56,12,56,31],"1361":[57,5,57,13],"1369":[57,14,57,19],"1377":[57,14,57,26],"1385":[57,5,57,27],"1393":[57,33,57,47],"1401":[57,48,57,58],"1409":[57,59,57,64],"1417":[57,48,57,65],"1425":[57,33,57,66],"1433":[56,12,57,66],"1441":[56,5,57,67],"1449":[55,1,58,2],"1457":[55,1,58,2],"1465":[55,1,58,2],"1473":[60,1,60,7],"1481":[60,18,60,34],"1489":[60,1,60,34],"1497":[60,1,60,35],"1505":[1,1,60,35],"1513":[1,1,60,35],"1521":[1,1,60,35],"1529":[1,1,60,35],"1537":[1,1,60,35],"1545":[1,1,60,35],"1553":[1,1,60,35],"1561":[1,1,60,35],"1569":[1,1,60,35],"1577":[1,1,60,35],"1585":[1,1,60,35],"1593":[1,1,60,35],"1601":[1,1,60,35],"1609":[1,1,60,35],"1617":[1,1,60,35],"1625":[1,1,60,35],"1633":[1,1,60,35],"1641":[1,1,60,35],"1649":[1,1,60,35],"1657":[1,1,60,35],"1665":[1,1,60,35],"1673":[1,1,60,35],"1681":[1,1,60,35],"1689":[1,1,60,35],"1697":[1,1,60,35],"1705":[1,1,60,35],"1713":[1,1,60,35],"1721":[1,1,60,35],"1729":[1,1,60,35],"1737":[55,1,58,2],"1745":[1,1,60,35],"1753":[55,1,58,2],"1761":[55,1,58,2],"1769":[1,1,60,35],"1777":[1,1,60,35],"nBranches":4,"originalCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/_baseIsTypedArray.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/_baseIsTypedArray_jalangi_.js","code":"var baseGetTag = require('./_baseGetTag'),\n    isLength = require('./isLength'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n"};
jalangiLabel565:
    while (true) {
        try {
            J$.Se(1505, '/home/james/nodejs/HiPar/node_modules/lodash/_baseIsTypedArray_jalangi_.js', '/home/james/nodejs/HiPar/node_modules/lodash/_baseIsTypedArray.js');
            function baseIsTypedArray(value) {
                jalangiLabel564:
                    while (true) {
                        try {
                            J$.Fe(1449, arguments.callee, this, arguments);
                            arguments = J$.N(1457, 'arguments', arguments, 4);
                            value = J$.N(1465, 'value', value, 4);
                            return J$.X1(1441, J$.Rt(1433, J$.C(16, J$.C(8, J$.F(1353, J$.R(1337, 'isObjectLike', isObjectLike, 1), 0)(J$.R(1345, 'value', value, 0))) ? J$.F(1385, J$.R(1361, 'isLength', isLength, 1), 0)(J$.G(1377, J$.R(1369, 'value', value, 0), 'length', 0)) : J$._()) ? J$.U(18, '!', J$.U(10, '!', J$.G(1425, J$.R(1393, 'typedArrayTags', typedArrayTags, 1), J$.F(1417, J$.R(1401, 'baseGetTag', baseGetTag, 1), 0)(J$.R(1409, 'value', value, 0)), 4))) : J$._()));
                        } catch (J$e) {
                            J$.Ex(1753, J$e);
                        } finally {
                            if (J$.Fr(1761))
                                continue jalangiLabel564;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(1513, 'baseGetTag', baseGetTag, 0);
            J$.N(1521, 'isLength', isLength, 0);
            J$.N(1529, 'isObjectLike', isObjectLike, 0);
            J$.N(1537, 'argsTag', argsTag, 0);
            J$.N(1545, 'arrayTag', arrayTag, 0);
            J$.N(1553, 'boolTag', boolTag, 0);
            J$.N(1561, 'dateTag', dateTag, 0);
            J$.N(1569, 'errorTag', errorTag, 0);
            J$.N(1577, 'funcTag', funcTag, 0);
            J$.N(1585, 'mapTag', mapTag, 0);
            J$.N(1593, 'numberTag', numberTag, 0);
            J$.N(1601, 'objectTag', objectTag, 0);
            J$.N(1609, 'regexpTag', regexpTag, 0);
            J$.N(1617, 'setTag', setTag, 0);
            J$.N(1625, 'stringTag', stringTag, 0);
            J$.N(1633, 'weakMapTag', weakMapTag, 0);
            J$.N(1641, 'arrayBufferTag', arrayBufferTag, 0);
            J$.N(1649, 'dataViewTag', dataViewTag, 0);
            J$.N(1657, 'float32Tag', float32Tag, 0);
            J$.N(1665, 'float64Tag', float64Tag, 0);
            J$.N(1673, 'int8Tag', int8Tag, 0);
            J$.N(1681, 'int16Tag', int16Tag, 0);
            J$.N(1689, 'int32Tag', int32Tag, 0);
            J$.N(1697, 'uint8Tag', uint8Tag, 0);
            J$.N(1705, 'uint8ClampedTag', uint8ClampedTag, 0);
            J$.N(1713, 'uint16Tag', uint16Tag, 0);
            J$.N(1721, 'uint32Tag', uint32Tag, 0);
            J$.N(1729, 'typedArrayTags', typedArrayTags, 0);
            baseIsTypedArray = J$.N(1745, 'baseIsTypedArray', J$.T(1737, baseIsTypedArray, 12, false, 1449), 0);
            var baseGetTag = J$.X1(89, J$.W(81, 'baseGetTag', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, './_baseGetTag', 21, false)), baseGetTag, 3)), isLength = J$.X1(105, J$.W(97, 'isLength', J$.F(49, J$.R(33, 'require', require, 2), 0)(J$.T(41, './isLength', 21, false)), isLength, 3)), isObjectLike = J$.X1(121, J$.W(113, 'isObjectLike', J$.F(73, J$.R(57, 'require', require, 2), 0)(J$.T(65, './isObjectLike', 21, false)), isObjectLike, 3));
            var argsTag = J$.X1(241, J$.W(233, 'argsTag', J$.T(129, '[object Arguments]', 21, false), argsTag, 3)), arrayTag = J$.X1(257, J$.W(249, 'arrayTag', J$.T(137, '[object Array]', 21, false), arrayTag, 3)), boolTag = J$.X1(273, J$.W(265, 'boolTag', J$.T(145, '[object Boolean]', 21, false), boolTag, 3)), dateTag = J$.X1(289, J$.W(281, 'dateTag', J$.T(153, '[object Date]', 21, false), dateTag, 3)), errorTag = J$.X1(305, J$.W(297, 'errorTag', J$.T(161, '[object Error]', 21, false), errorTag, 3)), funcTag = J$.X1(321, J$.W(313, 'funcTag', J$.T(169, '[object Function]', 21, false), funcTag, 3)), mapTag = J$.X1(337, J$.W(329, 'mapTag', J$.T(177, '[object Map]', 21, false), mapTag, 3)), numberTag = J$.X1(353, J$.W(345, 'numberTag', J$.T(185, '[object Number]', 21, false), numberTag, 3)), objectTag = J$.X1(369, J$.W(361, 'objectTag', J$.T(193, '[object Object]', 21, false), objectTag, 3)), regexpTag = J$.X1(385, J$.W(377, 'regexpTag', J$.T(201, '[object RegExp]', 21, false), regexpTag, 3)), setTag = J$.X1(401, J$.W(393, 'setTag', J$.T(209, '[object Set]', 21, false), setTag, 3)), stringTag = J$.X1(417, J$.W(409, 'stringTag', J$.T(217, '[object String]', 21, false), stringTag, 3)), weakMapTag = J$.X1(433, J$.W(425, 'weakMapTag', J$.T(225, '[object WeakMap]', 21, false), weakMapTag, 3));
            var arrayBufferTag = J$.X1(537, J$.W(529, 'arrayBufferTag', J$.T(441, '[object ArrayBuffer]', 21, false), arrayBufferTag, 3)), dataViewTag = J$.X1(553, J$.W(545, 'dataViewTag', J$.T(449, '[object DataView]', 21, false), dataViewTag, 3)), float32Tag = J$.X1(569, J$.W(561, 'float32Tag', J$.T(457, '[object Float32Array]', 21, false), float32Tag, 3)), float64Tag = J$.X1(585, J$.W(577, 'float64Tag', J$.T(465, '[object Float64Array]', 21, false), float64Tag, 3)), int8Tag = J$.X1(601, J$.W(593, 'int8Tag', J$.T(473, '[object Int8Array]', 21, false), int8Tag, 3)), int16Tag = J$.X1(617, J$.W(609, 'int16Tag', J$.T(481, '[object Int16Array]', 21, false), int16Tag, 3)), int32Tag = J$.X1(633, J$.W(625, 'int32Tag', J$.T(489, '[object Int32Array]', 21, false), int32Tag, 3)), uint8Tag = J$.X1(649, J$.W(641, 'uint8Tag', J$.T(497, '[object Uint8Array]', 21, false), uint8Tag, 3)), uint8ClampedTag = J$.X1(665, J$.W(657, 'uint8ClampedTag', J$.T(505, '[object Uint8ClampedArray]', 21, false), uint8ClampedTag, 3)), uint16Tag = J$.X1(681, J$.W(673, 'uint16Tag', J$.T(513, '[object Uint16Array]', 21, false), uint16Tag, 3)), uint32Tag = J$.X1(697, J$.W(689, 'uint32Tag', J$.T(521, '[object Uint32Array]', 21, false), uint32Tag, 3));
            var typedArrayTags = J$.X1(721, J$.W(713, 'typedArrayTags', J$.T(705, {}, 11, false), typedArrayTags, 3));
            J$.X1(953, J$.P(945, J$.R(729, 'typedArrayTags', typedArrayTags, 1), J$.R(737, 'float32Tag', float32Tag, 1), J$.P(937, J$.R(745, 'typedArrayTags', typedArrayTags, 1), J$.R(753, 'float64Tag', float64Tag, 1), J$.P(929, J$.R(761, 'typedArrayTags', typedArrayTags, 1), J$.R(769, 'int8Tag', int8Tag, 1), J$.P(921, J$.R(777, 'typedArrayTags', typedArrayTags, 1), J$.R(785, 'int16Tag', int16Tag, 1), J$.P(913, J$.R(793, 'typedArrayTags', typedArrayTags, 1), J$.R(801, 'int32Tag', int32Tag, 1), J$.P(905, J$.R(809, 'typedArrayTags', typedArrayTags, 1), J$.R(817, 'uint8Tag', uint8Tag, 1), J$.P(897, J$.R(825, 'typedArrayTags', typedArrayTags, 1), J$.R(833, 'uint8ClampedTag', uint8ClampedTag, 1), J$.P(889, J$.R(841, 'typedArrayTags', typedArrayTags, 1), J$.R(849, 'uint16Tag', uint16Tag, 1), J$.P(881, J$.R(857, 'typedArrayTags', typedArrayTags, 1), J$.R(865, 'uint32Tag', uint32Tag, 1), J$.T(873, true, 23, false), 2), 2), 2), 2), 2), 2), 2), 2), 2));
            J$.X1(1329, J$.P(1321, J$.R(961, 'typedArrayTags', typedArrayTags, 1), J$.R(969, 'argsTag', argsTag, 1), J$.P(1313, J$.R(977, 'typedArrayTags', typedArrayTags, 1), J$.R(985, 'arrayTag', arrayTag, 1), J$.P(1305, J$.R(993, 'typedArrayTags', typedArrayTags, 1), J$.R(1001, 'arrayBufferTag', arrayBufferTag, 1), J$.P(1297, J$.R(1009, 'typedArrayTags', typedArrayTags, 1), J$.R(1017, 'boolTag', boolTag, 1), J$.P(1289, J$.R(1025, 'typedArrayTags', typedArrayTags, 1), J$.R(1033, 'dataViewTag', dataViewTag, 1), J$.P(1281, J$.R(1041, 'typedArrayTags', typedArrayTags, 1), J$.R(1049, 'dateTag', dateTag, 1), J$.P(1273, J$.R(1057, 'typedArrayTags', typedArrayTags, 1), J$.R(1065, 'errorTag', errorTag, 1), J$.P(1265, J$.R(1073, 'typedArrayTags', typedArrayTags, 1), J$.R(1081, 'funcTag', funcTag, 1), J$.P(1257, J$.R(1089, 'typedArrayTags', typedArrayTags, 1), J$.R(1097, 'mapTag', mapTag, 1), J$.P(1249, J$.R(1105, 'typedArrayTags', typedArrayTags, 1), J$.R(1113, 'numberTag', numberTag, 1), J$.P(1241, J$.R(1121, 'typedArrayTags', typedArrayTags, 1), J$.R(1129, 'objectTag', objectTag, 1), J$.P(1233, J$.R(1137, 'typedArrayTags', typedArrayTags, 1), J$.R(1145, 'regexpTag', regexpTag, 1), J$.P(1225, J$.R(1153, 'typedArrayTags', typedArrayTags, 1), J$.R(1161, 'setTag', setTag, 1), J$.P(1217, J$.R(1169, 'typedArrayTags', typedArrayTags, 1), J$.R(1177, 'stringTag', stringTag, 1), J$.P(1209, J$.R(1185, 'typedArrayTags', typedArrayTags, 1), J$.R(1193, 'weakMapTag', weakMapTag, 1), J$.T(1201, false, 23, false), 2), 2), 2), 2), 2), 2), 2), 2), 2), 2), 2), 2), 2), 2), 2));
            J$.X1(1497, J$.P(1489, J$.R(1473, 'module', module, 2), 'exports', J$.R(1481, 'baseIsTypedArray', baseIsTypedArray, 1), 0));
        } catch (J$e) {
            J$.Ex(1769, J$e);
        } finally {
            if (J$.Sr(1777)) {
                J$.L();
                continue jalangiLabel565;
            } else {
                J$.L();
                break jalangiLabel565;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
