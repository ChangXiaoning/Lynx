J$.iids = {"9":[2,15,2,21],"17":[2,15,2,21],"25":[2,15,2,21],"33":[12,20,12,26],"41":[12,39,12,45],"49":[12,39,12,52],"57":[12,54,12,61],"65":[12,67,12,73],"73":[12,54,12,74],"75":[12,54,12,66],"81":[12,16,12,75],"83":[12,20,12,38],"89":[12,16,12,75],"97":[12,16,12,75],"105":[13,3,13,9],"113":[13,22,13,28],"121":[13,22,13,38],"129":[13,3,13,38],"137":[13,3,13,39],"145":[14,10,14,16],"153":[14,10,14,16],"161":[14,3,14,17],"169":[11,1,15,2],"177":[11,1,15,2],"185":[11,1,15,2],"193":[11,1,15,2],"201":[17,1,17,7],"209":[17,18,17,29],"217":[17,1,17,29],"225":[17,1,17,30],"233":[1,1,17,30],"241":[1,1,17,30],"249":[11,1,15,2],"257":[1,1,17,30],"265":[11,1,15,2],"273":[11,1,15,2],"281":[1,1,17,30],"289":[1,1,17,30],"nBranches":0,"originalCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/_cloneRegExp.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/_cloneRegExp_jalangi_.js","code":"/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nmodule.exports = cloneRegExp;\n"};
jalangiLabel626:
    while (true) {
        try {
            J$.Se(233, '/home/james/nodejs/HiPar/node_modules/lodash/_cloneRegExp_jalangi_.js', '/home/james/nodejs/HiPar/node_modules/lodash/_cloneRegExp.js');
            function cloneRegExp(regexp) {
                jalangiLabel625:
                    while (true) {
                        try {
                            J$.Fe(169, arguments.callee, this, arguments);
                            arguments = J$.N(177, 'arguments', arguments, 4);
                            regexp = J$.N(185, 'regexp', regexp, 4);
                            J$.N(193, 'result', result, 0);
                            var result = J$.X1(97, J$.W(89, 'result', J$.M(81, J$.R(33, 'regexp', regexp, 0), 'constructor', 2)(J$.G(49, J$.R(41, 'regexp', regexp, 0), 'source', 0), J$.M(73, J$.R(57, 'reFlags', reFlags, 1), 'exec', 0)(J$.R(65, 'regexp', regexp, 0))), result, 1));
                            J$.X1(137, J$.P(129, J$.R(105, 'result', result, 0), 'lastIndex', J$.G(121, J$.R(113, 'regexp', regexp, 0), 'lastIndex', 0), 0));
                            return J$.X1(161, J$.Rt(153, J$.R(145, 'result', result, 0)));
                        } catch (J$e) {
                            J$.Ex(265, J$e);
                        } finally {
                            if (J$.Fr(273))
                                continue jalangiLabel625;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(241, 'reFlags', reFlags, 0);
            cloneRegExp = J$.N(257, 'cloneRegExp', J$.T(249, cloneRegExp, 12, false, 169), 0);
            var reFlags = J$.X1(25, J$.W(17, 'reFlags', J$.T(9, /\w*$/, 14, false), reFlags, 3));
            J$.X1(225, J$.P(217, J$.R(201, 'module', module, 2), 'exports', J$.R(209, 'cloneRegExp', cloneRegExp, 1), 0));
        } catch (J$e) {
            J$.Ex(281, J$e);
        } finally {
            if (J$.Sr(289)) {
                J$.L();
                continue jalangiLabel626;
            } else {
                J$.L();
                break jalangiLabel626;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
