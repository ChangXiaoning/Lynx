J$.iids = {"8":[12,16,12,22],"9":[1,24,1,31],"17":[1,32,1,53],"25":[1,24,1,54],"33":[1,24,1,54],"41":[1,24,1,54],"49":[12,16,12,22],"57":[12,25,12,41],"65":[12,42,12,52],"73":[12,42,12,59],"81":[12,25,12,60],"89":[12,63,12,73],"97":[12,63,12,80],"105":[12,16,12,80],"113":[12,16,12,80],"121":[13,14,13,24],"129":[13,37,13,43],"137":[13,45,13,55],"145":[13,45,13,66],"153":[13,68,13,78],"161":[13,68,13,85],"169":[13,10,13,86],"171":[13,14,13,36],"177":[13,10,13,86],"185":[13,3,13,87],"193":[11,1,14,2],"201":[11,1,14,2],"209":[11,1,14,2],"217":[11,1,14,2],"225":[11,1,14,2],"233":[16,1,16,7],"241":[16,18,16,33],"249":[16,1,16,33],"257":[16,1,16,34],"265":[1,1,16,34],"273":[1,1,16,34],"281":[11,1,14,2],"289":[1,1,16,34],"297":[12,16,12,80],"305":[11,1,14,2],"313":[11,1,14,2],"321":[1,1,16,34],"329":[1,1,16,34],"nBranches":2,"originalCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/_cloneTypedArray.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/_cloneTypedArray_jalangi_.js","code":"var cloneArrayBuffer = require('./_cloneArrayBuffer');\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nmodule.exports = cloneTypedArray;\n"};
jalangiLabel630:
    while (true) {
        try {
            J$.Se(265, '/home/james/nodejs/HiPar/node_modules/lodash/_cloneTypedArray_jalangi_.js', '/home/james/nodejs/HiPar/node_modules/lodash/_cloneTypedArray.js');
            function cloneTypedArray(typedArray, isDeep) {
                jalangiLabel629:
                    while (true) {
                        try {
                            J$.Fe(193, arguments.callee, this, arguments);
                            arguments = J$.N(201, 'arguments', arguments, 4);
                            typedArray = J$.N(209, 'typedArray', typedArray, 4);
                            isDeep = J$.N(217, 'isDeep', isDeep, 4);
                            J$.N(225, 'buffer', buffer, 0);
                            var buffer = J$.X1(113, J$.W(105, 'buffer', J$.X1(297, J$.C(8, J$.R(49, 'isDeep', isDeep, 0))) ? J$.F(81, J$.R(57, 'cloneArrayBuffer', cloneArrayBuffer, 1), 0)(J$.G(73, J$.R(65, 'typedArray', typedArray, 0), 'buffer', 0)) : J$.G(97, J$.R(89, 'typedArray', typedArray, 0), 'buffer', 0), buffer, 1));
                            return J$.X1(185, J$.Rt(177, J$.M(169, J$.R(121, 'typedArray', typedArray, 0), 'constructor', 2)(J$.R(129, 'buffer', buffer, 0), J$.G(145, J$.R(137, 'typedArray', typedArray, 0), 'byteOffset', 0), J$.G(161, J$.R(153, 'typedArray', typedArray, 0), 'length', 0))));
                        } catch (J$e) {
                            J$.Ex(305, J$e);
                        } finally {
                            if (J$.Fr(313))
                                continue jalangiLabel629;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(273, 'cloneArrayBuffer', cloneArrayBuffer, 0);
            cloneTypedArray = J$.N(289, 'cloneTypedArray', J$.T(281, cloneTypedArray, 12, false, 193), 0);
            var cloneArrayBuffer = J$.X1(41, J$.W(33, 'cloneArrayBuffer', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, './_cloneArrayBuffer', 21, false)), cloneArrayBuffer, 3));
            J$.X1(257, J$.P(249, J$.R(233, 'module', module, 2), 'exports', J$.R(241, 'cloneTypedArray', cloneTypedArray, 1), 0));
        } catch (J$e) {
            J$.Ex(321, J$e);
        } finally {
            if (J$.Sr(329)) {
                J$.L();
                continue jalangiLabel630;
            } else {
                J$.L();
                break jalangiLabel630;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
