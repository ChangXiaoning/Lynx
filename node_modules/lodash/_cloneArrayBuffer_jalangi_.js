J$.iids = {"9":[1,18,1,25],"17":[1,26,1,41],"25":[1,18,1,42],"33":[1,18,1,42],"41":[1,18,1,42],"49":[11,20,11,31],"57":[11,44,11,55],"65":[11,44,11,66],"73":[11,16,11,67],"75":[11,20,11,43],"81":[11,16,11,67],"89":[11,16,11,67],"97":[12,7,12,17],"105":[12,18,12,24],"113":[12,3,12,25],"121":[12,34,12,44],"129":[12,45,12,56],"137":[12,30,12,57],"145":[12,3,12,58],"147":[12,3,12,29],"153":[12,3,12,59],"161":[13,10,13,16],"169":[13,10,13,16],"177":[13,3,13,17],"185":[10,1,14,2],"193":[10,1,14,2],"201":[10,1,14,2],"209":[10,1,14,2],"217":[16,1,16,7],"225":[16,18,16,34],"233":[16,1,16,34],"241":[16,1,16,35],"249":[1,1,16,35],"257":[1,1,16,35],"265":[10,1,14,2],"273":[1,1,16,35],"281":[10,1,14,2],"289":[10,1,14,2],"297":[1,1,16,35],"305":[1,1,16,35],"nBranches":0,"originalCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/_cloneArrayBuffer.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/_cloneArrayBuffer_jalangi_.js","code":"var Uint8Array = require('./_Uint8Array');\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nmodule.exports = cloneArrayBuffer;\n"};
jalangiLabel621:
    while (true) {
        try {
            J$.Se(249, '/home/james/nodejs/HiPar/node_modules/lodash/_cloneArrayBuffer_jalangi_.js', '/home/james/nodejs/HiPar/node_modules/lodash/_cloneArrayBuffer.js');
            function cloneArrayBuffer(arrayBuffer) {
                jalangiLabel620:
                    while (true) {
                        try {
                            J$.Fe(185, arguments.callee, this, arguments);
                            arguments = J$.N(193, 'arguments', arguments, 4);
                            arrayBuffer = J$.N(201, 'arrayBuffer', arrayBuffer, 4);
                            J$.N(209, 'result', result, 0);
                            var result = J$.X1(89, J$.W(81, 'result', J$.M(73, J$.R(49, 'arrayBuffer', arrayBuffer, 0), 'constructor', 2)(J$.G(65, J$.R(57, 'arrayBuffer', arrayBuffer, 0), 'byteLength', 0)), result, 1));
                            J$.X1(153, J$.M(145, J$.F(113, J$.R(97, 'Uint8Array', Uint8Array, 1), 1)(J$.R(105, 'result', result, 0)), 'set', 0)(J$.F(137, J$.R(121, 'Uint8Array', Uint8Array, 1), 1)(J$.R(129, 'arrayBuffer', arrayBuffer, 0))));
                            return J$.X1(177, J$.Rt(169, J$.R(161, 'result', result, 0)));
                        } catch (J$e) {
                            J$.Ex(281, J$e);
                        } finally {
                            if (J$.Fr(289))
                                continue jalangiLabel620;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(257, 'Uint8Array', Uint8Array, 0);
            cloneArrayBuffer = J$.N(273, 'cloneArrayBuffer', J$.T(265, cloneArrayBuffer, 12, false, 185), 0);
            var Uint8Array = J$.X1(41, J$.W(33, 'Uint8Array', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, './_Uint8Array', 21, false)), Uint8Array, 3));
            J$.X1(241, J$.P(233, J$.R(217, 'module', module, 2), 'exports', J$.R(225, 'cloneArrayBuffer', cloneArrayBuffer, 1), 0));
        } catch (J$e) {
            J$.Ex(297, J$e);
        } finally {
            if (J$.Sr(305)) {
                J$.L();
                continue jalangiLabel621;
            } else {
                J$.L();
                break jalangiLabel621;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
