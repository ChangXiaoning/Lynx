J$.iids = {"9":[10,12,10,16],"17":[10,17,10,22],"25":[10,12,10,23],"33":[10,12,10,23],"41":[10,5,10,24],"49":[9,10,11,4],"57":[9,10,11,4],"65":[9,10,11,4],"73":[9,10,11,4],"81":[9,10,11,4],"89":[9,3,11,5],"97":[8,1,12,2],"105":[8,1,12,2],"113":[8,1,12,2],"121":[14,1,14,7],"129":[14,18,14,27],"137":[14,1,14,27],"145":[14,1,14,28],"153":[1,1,14,28],"161":[8,1,12,2],"169":[1,1,14,28],"177":[9,10,11,4],"185":[9,10,11,4],"193":[8,1,12,2],"201":[8,1,12,2],"209":[1,1,14,28],"217":[1,1,14,28],"nBranches":0,"originalCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/_baseUnary.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/node_modules/lodash/_baseUnary_jalangi_.js","code":"/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n"};
jalangiLabel430:
    while (true) {
        try {
            J$.Se(153, '/home/james/nodejs/HiPar/node_modules/lodash/_baseUnary_jalangi_.js', '/home/james/nodejs/HiPar/node_modules/lodash/_baseUnary.js');
            function baseUnary(func) {
                jalangiLabel429:
                    while (true) {
                        try {
                            J$.Fe(97, arguments.callee, this, arguments);
                            arguments = J$.N(105, 'arguments', arguments, 4);
                            func = J$.N(113, 'func', func, 4);
                            return J$.X1(89, J$.Rt(81, J$.T(73, function (value) {
                                jalangiLabel428:
                                    while (true) {
                                        try {
                                            J$.Fe(49, arguments.callee, this, arguments);
                                            arguments = J$.N(57, 'arguments', arguments, 4);
                                            value = J$.N(65, 'value', value, 4);
                                            return J$.X1(41, J$.Rt(33, J$.F(25, J$.R(9, 'func', func, 0), 0)(J$.R(17, 'value', value, 0))));
                                        } catch (J$e) {
                                            J$.Ex(177, J$e);
                                        } finally {
                                            if (J$.Fr(185))
                                                continue jalangiLabel428;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 49)));
                        } catch (J$e) {
                            J$.Ex(193, J$e);
                        } finally {
                            if (J$.Fr(201))
                                continue jalangiLabel429;
                            else
                                return J$.Ra();
                        }
                    }
            }
            baseUnary = J$.N(169, 'baseUnary', J$.T(161, baseUnary, 12, false, 97), 0);
            J$.X1(145, J$.P(137, J$.R(121, 'module', module, 2), 'exports', J$.R(129, 'baseUnary', baseUnary, 1), 0));
        } catch (J$e) {
            J$.Ex(209, J$e);
        } finally {
            if (J$.Sr(217)) {
                J$.L();
                continue jalangiLabel430;
            } else {
                J$.L();
                break jalangiLabel430;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
