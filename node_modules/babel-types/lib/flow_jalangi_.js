J$.iids = {"8":[11,44,11,65],"9":[2,1,2,8],"10":[11,107,11,118],"16":[11,147,11,193],"17":[2,22,2,26],"18":[16,7,16,29],"24":[11,107,11,118],"25":[2,1,2,26],"26":[31,19,31,35],"32":[11,44,11,65],"33":[2,1,2,27],"34":[31,37,31,40],"40":[16,7,16,29],"41":[3,1,3,8],"48":[33,9,33,14],"49":[3,37,3,62],"50":[31,37,31,40],"56":[35,9,35,33],"57":[3,1,3,62],"58":[33,9,33,14],"64":[39,9,39,36],"65":[3,1,3,63],"66":[35,9,35,33],"72":[43,9,43,37],"73":[4,1,4,8],"74":[49,11,49,45],"80":[49,11,49,45],"81":[4,32,4,52],"82":[90,7,90,24],"88":[48,9,48,38],"89":[4,1,4,52],"90":[92,14,92,31],"96":[62,15,62,34],"97":[4,1,4,53],"98":[94,14,94,34],"104":[61,13,61,36],"105":[5,1,5,8],"106":[96,14,96,32],"112":[59,11,59,25],"113":[5,45,5,78],"114":[98,14,98,33],"120":[56,9,56,40],"121":[5,1,5,78],"122":[100,14,100,31],"128":[31,19,31,35],"129":[5,1,5,79],"130":[102,14,102,31],"136":[102,14,102,31],"137":[7,14,7,21],"144":[100,14,100,31],"145":[7,22,7,31],"152":[98,14,98,33],"153":[7,14,7,32],"160":[96,14,96,32],"161":[7,14,7,32],"168":[94,14,94,34],"169":[7,14,7,32],"176":[92,14,92,31],"177":[9,9,9,32],"184":[90,7,90,24],"185":[9,33,9,39],"193":[9,9,9,40],"201":[9,9,9,40],"209":[9,9,9,40],"217":[11,44,11,47],"225":[11,51,11,54],"233":[11,51,11,65],"241":[11,75,11,78],"249":[11,75,11,78],"257":[11,68,11,79],"265":[11,100,11,102],"273":[11,100,11,102],"281":[11,100,11,102],"289":[11,107,11,110],"297":[11,114,11,118],"305":[11,137,11,140],"313":[11,147,11,153],"321":[11,147,11,163],"329":[11,147,11,178],"337":[11,184,11,187],"345":[11,189,11,192],"353":[11,147,11,193],"355":[11,147,11,183],"361":[11,195,11,201],"369":[11,202,11,205],"377":[11,209,11,212],"385":[11,213,11,216],"393":[11,209,11,217],"401":[11,195,11,217],"409":[11,195,11,218],"417":[11,137,11,140],"425":[11,121,11,219],"433":[11,121,11,219],"441":[11,220,11,226],"449":[11,237,11,240],"457":[11,220,11,240],"465":[11,220,11,241],"473":[11,248,11,254],"481":[11,248,11,254],"489":[11,241,11,255],"497":[11,1,11,257],"505":[11,1,11,257],"513":[11,1,11,257],"521":[11,1,11,257],"529":[11,1,11,257],"537":[14,19,14,39],"545":[14,40,14,45],"553":[14,19,14,46],"561":[14,19,14,46],"569":[14,19,14,46],"577":[16,7,16,16],"585":[16,7,16,23],"593":[16,28,16,29],"601":[17,12,17,21],"609":[17,22,17,23],"617":[17,12,17,24],"625":[17,12,17,24],"633":[17,5,17,25],"641":[19,12,19,13],"649":[19,34,19,43],"657":[19,12,19,44],"659":[19,12,19,33],"665":[19,12,19,44],"673":[19,5,19,45],"681":[13,1,21,2],"689":[13,1,21,2],"697":[13,1,21,2],"705":[13,1,21,2],"713":[24,18,24,20],"721":[24,18,24,20],"729":[24,18,24,20],"737":[25,15,25,17],"745":[25,15,25,17],"753":[25,15,25,17],"761":[27,20,27,22],"769":[27,20,27,22],"777":[27,20,27,22],"785":[29,15,29,17],"793":[29,15,29,17],"801":[29,15,29,17],"809":[31,16,31,17],"817":[31,16,31,17],"825":[31,16,31,17],"833":[31,19,31,20],"841":[31,23,31,28],"849":[31,23,31,35],"865":[31,37,31,38],"873":[31,37,31,40],"889":[32,16,32,21],"897":[32,22,32,23],"905":[32,16,32,24],"913":[32,16,32,24],"921":[32,16,32,24],"929":[33,10,33,14],"937":[35,9,35,14],"945":[35,23,35,27],"953":[35,9,35,28],"955":[35,9,35,22],"961":[35,32,35,33],"969":[39,9,39,10],"977":[39,31,39,35],"985":[39,9,39,36],"987":[39,9,39,30],"993":[40,15,40,19],"1001":[40,14,40,20],"1009":[40,14,40,20],"1017":[40,7,40,21],"1025":[43,9,43,10],"1033":[43,32,43,36],"1041":[43,9,43,37],"1043":[43,9,43,31],"1049":[44,7,44,12],"1057":[44,13,44,17],"1065":[44,13,44,22],"1073":[44,26,44,30],"1081":[44,7,44,30],"1089":[44,7,44,31],"1097":[48,9,48,10],"1105":[48,33,48,37],"1113":[48,9,48,38],"1115":[48,9,48,32],"1121":[49,11,49,21],"1129":[49,30,49,34],"1137":[49,30,49,40],"1145":[49,11,49,41],"1147":[49,11,49,29],"1153":[49,44,49,45],"1161":[50,17,50,22],"1169":[50,30,50,34],"1177":[50,30,50,40],"1185":[50,17,50,41],"1187":[50,17,50,29],"1193":[50,17,50,41],"1201":[50,9,50,42],"1209":[51,9,51,19],"1217":[51,25,51,29],"1225":[51,25,51,35],"1233":[51,9,51,36],"1235":[51,9,51,24],"1241":[51,9,51,37],"1249":[56,9,56,10],"1257":[56,35,56,39],"1265":[56,9,56,40],"1267":[56,9,56,34],"1273":[57,18,57,22],"1281":[57,18,57,25],"1289":[57,18,57,30],"1297":[57,18,57,30],"1305":[57,18,57,30],"1313":[59,11,59,19],"1321":[59,20,59,24],"1329":[59,11,59,25],"1337":[60,24,60,32],"1345":[60,33,60,37],"1353":[60,24,60,38],"1361":[60,24,60,38],"1369":[60,24,60,38],"1377":[61,13,61,21],"1385":[61,13,61,36],"1393":[62,15,62,19],"1401":[62,15,62,34],"1409":[63,13,63,21],"1417":[63,13,63,36],"1425":[63,46,63,66],"1433":[63,67,63,75],"1441":[63,67,63,90],"1449":[63,67,63,97],"1457":[63,105,63,109],"1465":[63,105,63,124],"1473":[63,105,63,131],"1481":[63,67,63,132],"1483":[63,67,63,104],"1489":[63,46,63,133],"1497":[63,13,63,133],"1505":[63,13,63,134],"1513":[66,22,66,26],"1521":[66,22,66,41],"1529":[66,22,66,41],"1537":[66,11,66,42],"1545":[69,9,69,17],"1553":[69,18,69,22],"1561":[69,26,69,30],"1569":[69,9,69,30],"1577":[69,9,69,31],"1585":[75,5,75,10],"1593":[75,16,75,20],"1601":[75,5,75,21],"1603":[75,5,75,15],"1609":[75,5,75,22],"1617":[78,20,78,25],"1625":[79,5,79,10],"1633":[79,16,79,21],"1641":[79,22,79,26],"1649":[79,16,79,27],"1657":[79,5,79,28],"1659":[79,5,79,15],"1665":[79,5,79,29],"1673":[78,20,78,25],"1681":[78,3,80,4],"1689":[78,3,80,4],"1697":[82,21,82,29],"1705":[83,5,83,10],"1713":[83,16,83,24],"1721":[83,25,83,30],"1729":[83,16,83,31],"1737":[83,5,83,32],"1739":[83,5,83,15],"1745":[83,5,83,33],"1753":[82,21,82,29],"1761":[82,3,84,4],"1769":[82,3,84,4],"1777":[86,10,86,15],"1785":[86,10,86,15],"1793":[86,3,86,16],"1801":[23,1,87,2],"1809":[23,1,87,2],"1817":[23,1,87,2],"1825":[23,1,87,2],"1833":[23,1,87,2],"1841":[23,1,87,2],"1849":[23,1,87,2],"1857":[23,1,87,2],"1865":[23,1,87,2],"1873":[23,1,87,2],"1881":[23,1,87,2],"1889":[23,1,87,2],"1897":[23,1,87,2],"1905":[90,7,90,11],"1913":[90,16,90,24],"1921":[91,12,91,13],"1929":[91,12,91,36],"1931":[91,12,91,34],"1937":[91,12,91,36],"1945":[91,5,91,37],"1953":[92,14,92,18],"1961":[92,23,92,31],"1969":[93,12,93,13],"1977":[93,12,93,36],"1979":[93,12,93,34],"1985":[93,12,93,36],"1993":[93,5,93,37],"2001":[94,14,94,18],"2009":[94,23,94,34],"2017":[95,12,95,13],"2025":[95,12,95,34],"2027":[95,12,95,32],"2033":[95,12,95,34],"2041":[95,5,95,35],"2049":[96,14,96,18],"2057":[96,23,96,32],"2065":[97,12,97,13],"2073":[97,12,97,37],"2075":[97,12,97,35],"2081":[97,12,97,37],"2089":[97,5,97,38],"2097":[98,14,98,18],"2105":[98,23,98,33],"2113":[99,12,99,13],"2121":[99,36,99,37],"2129":[99,49,99,59],"2137":[99,36,99,60],"2139":[99,36,99,48],"2145":[99,12,99,61],"2147":[99,12,99,35],"2153":[99,12,99,61],"2161":[99,5,99,62],"2169":[100,14,100,18],"2177":[100,23,100,31],"2185":[101,12,101,13],"2193":[101,36,101,37],"2201":[101,49,101,57],"2209":[101,36,101,58],"2211":[101,36,101,48],"2217":[101,12,101,59],"2219":[101,12,101,35],"2225":[101,12,101,59],"2233":[101,5,101,60],"2241":[102,14,102,18],"2249":[102,23,102,31],"2257":[103,12,103,13],"2265":[103,36,103,37],"2273":[103,49,103,57],"2281":[103,36,103,58],"2283":[103,36,103,48],"2289":[103,12,103,59],"2291":[103,12,103,35],"2297":[103,12,103,59],"2305":[103,5,103,60],"2313":[105,15,105,20],"2321":[105,21,105,43],"2329":[105,11,105,44],"2337":[105,11,105,44],"2345":[105,5,105,45],"2353":[89,1,107,2],"2361":[89,1,107,2],"2369":[89,1,107,2],"2377":[1,1,107,2],"2385":[1,1,107,2],"2393":[1,1,107,2],"2401":[11,1,11,257],"2409":[1,1,107,2],"2417":[13,1,21,2],"2425":[1,1,107,2],"2433":[23,1,87,2],"2441":[1,1,107,2],"2449":[89,1,107,2],"2457":[1,1,107,2],"2465":[11,143,11,218],"2473":[11,103,11,220],"2481":[11,40,11,256],"2489":[11,1,11,257],"2497":[11,1,11,257],"2505":[16,3,20,4],"2513":[13,1,21,2],"2521":[13,1,21,2],"2529":[33,5,33,25],"2537":[35,5,37,6],"2545":[39,5,41,6],"2553":[43,5,46,6],"2561":[49,7,52,8],"2569":[48,5,54,6],"2577":[62,11,64,12],"2585":[61,9,67,10],"2593":[59,7,70,8],"2601":[56,5,73,6],"2609":[31,3,76,4],"2617":[31,3,76,4],"2625":[23,1,87,2],"2633":[23,1,87,2],"2641":[102,10,106,4],"2649":[100,10,106,4],"2657":[98,10,106,4],"2665":[96,10,106,4],"2673":[94,10,106,4],"2681":[92,10,106,4],"2689":[90,3,106,4],"2697":[89,1,107,2],"2705":[89,1,107,2],"2713":[1,1,107,2],"2721":[1,1,107,2],"nBranches":46,"originalCodeFileName":"/home/james/nodejs/HiPar/node_modules/babel-types/lib/flow.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/node_modules/babel-types/lib/flow_jalangi_.js","code":"\"use strict\";\n\nexports.__esModule = true;\nexports.createUnionTypeAnnotation = createUnionTypeAnnotation;\nexports.removeTypeDuplicates = removeTypeDuplicates;\nexports.createTypeAnnotationBasedOnTypeof = createTypeAnnotationBasedOnTypeof;\n\nvar _index = require(\"./index\");\n\nvar t = _interopRequireWildcard(_index);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction createUnionTypeAnnotation(types) {\n  var flattened = removeTypeDuplicates(types);\n\n  if (flattened.length === 1) {\n    return flattened[0];\n  } else {\n    return t.unionTypeAnnotation(flattened);\n  }\n}\n\nfunction removeTypeDuplicates(nodes) {\n  var generics = {};\n  var bases = {};\n\n  var typeGroups = [];\n\n  var types = [];\n\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    if (!node) continue;\n\n    if (types.indexOf(node) >= 0) {\n      continue;\n    }\n\n    if (t.isAnyTypeAnnotation(node)) {\n      return [node];\n    }\n\n    if (t.isFlowBaseAnnotation(node)) {\n      bases[node.type] = node;\n      continue;\n    }\n\n    if (t.isUnionTypeAnnotation(node)) {\n      if (typeGroups.indexOf(node.types) < 0) {\n        nodes = nodes.concat(node.types);\n        typeGroups.push(node.types);\n      }\n      continue;\n    }\n\n    if (t.isGenericTypeAnnotation(node)) {\n      var name = node.id.name;\n\n      if (generics[name]) {\n        var existing = generics[name];\n        if (existing.typeParameters) {\n          if (node.typeParameters) {\n            existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params));\n          }\n        } else {\n          existing = node.typeParameters;\n        }\n      } else {\n        generics[name] = node;\n      }\n\n      continue;\n    }\n\n    types.push(node);\n  }\n\n  for (var type in bases) {\n    types.push(bases[type]);\n  }\n\n  for (var _name in generics) {\n    types.push(generics[_name]);\n  }\n\n  return types;\n}\n\nfunction createTypeAnnotationBasedOnTypeof(type) {\n  if (type === \"string\") {\n    return t.stringTypeAnnotation();\n  } else if (type === \"number\") {\n    return t.numberTypeAnnotation();\n  } else if (type === \"undefined\") {\n    return t.voidTypeAnnotation();\n  } else if (type === \"boolean\") {\n    return t.booleanTypeAnnotation();\n  } else if (type === \"function\") {\n    return t.genericTypeAnnotation(t.identifier(\"Function\"));\n  } else if (type === \"object\") {\n    return t.genericTypeAnnotation(t.identifier(\"Object\"));\n  } else if (type === \"symbol\") {\n    return t.genericTypeAnnotation(t.identifier(\"Symbol\"));\n  } else {\n    throw new Error(\"Invalid typeof value\");\n  }\n}"};
jalangiLabel439:
    while (true) {
        try {
            J$.Se(2377, '/home/james/nodejs/HiPar/node_modules/babel-types/lib/flow_jalangi_.js', '/home/james/nodejs/HiPar/node_modules/babel-types/lib/flow.js');
            function _interopRequireWildcard(obj) {
                jalangiLabel435:
                    while (true) {
                        try {
                            J$.Fe(497, arguments.callee, this, arguments);
                            arguments = J$.N(505, 'arguments', arguments, 4);
                            obj = J$.N(513, 'obj', obj, 4);
                            J$.N(521, 'newObj', newObj, 0);
                            J$.N(529, 'key', key, 0);
                            if (J$.X1(2481, J$.C(32, J$.C(8, J$.R(217, 'obj', obj, 0)) ? J$.G(233, J$.R(225, 'obj', obj, 0), '__esModule', 0) : J$._()))) {
                                return J$.X1(257, J$.Rt(249, J$.R(241, 'obj', obj, 0)));
                            } else {
                                var newObj = J$.X1(281, J$.W(273, 'newObj', J$.T(265, {}, 11, false), newObj, 1));
                                if (J$.X1(2473, J$.C(24, J$.B(10, '!=', J$.R(289, 'obj', obj, 0), J$.T(297, null, 25, false), 0)))) {
                                    for (J$._tm_p in J$.H(417, J$.R(305, 'obj', obj, 0))) {
                                        var key = J$.X1(433, J$.W(425, 'key', J$._tm_p, key, 1));
                                        {
                                            {
                                                if (J$.X1(2465, J$.C(16, J$.M(353, J$.G(329, J$.G(321, J$.R(313, 'Object', Object, 2), 'prototype', 0), 'hasOwnProperty', 0), 'call', 0)(J$.R(337, 'obj', obj, 0), J$.R(345, 'key', key, 0)))))
                                                    J$.X1(409, J$.P(401, J$.R(361, 'newObj', newObj, 0), J$.R(369, 'key', key, 0), J$.G(393, J$.R(377, 'obj', obj, 0), J$.R(385, 'key', key, 0), 4), 2));
                                            }
                                        }
                                    }
                                }
                                J$.X1(465, J$.P(457, J$.R(441, 'newObj', newObj, 0), 'default', J$.R(449, 'obj', obj, 0), 0));
                                return J$.X1(489, J$.Rt(481, J$.R(473, 'newObj', newObj, 0)));
                            }
                        } catch (J$e) {
                            J$.Ex(2489, J$e);
                        } finally {
                            if (J$.Fr(2497))
                                continue jalangiLabel435;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function createUnionTypeAnnotation(types) {
                jalangiLabel436:
                    while (true) {
                        try {
                            J$.Fe(681, arguments.callee, this, arguments);
                            arguments = J$.N(689, 'arguments', arguments, 4);
                            types = J$.N(697, 'types', types, 4);
                            J$.N(705, 'flattened', flattened, 0);
                            var flattened = J$.X1(569, J$.W(561, 'flattened', J$.F(553, J$.R(537, 'removeTypeDuplicates', removeTypeDuplicates, 1), 0)(J$.R(545, 'types', types, 0)), flattened, 1));
                            if (J$.X1(2505, J$.C(40, J$.B(18, '===', J$.G(585, J$.R(577, 'flattened', flattened, 0), 'length', 0), J$.T(593, 1, 22, false), 0)))) {
                                return J$.X1(633, J$.Rt(625, J$.G(617, J$.R(601, 'flattened', flattened, 0), J$.T(609, 0, 22, false), 4)));
                            } else {
                                return J$.X1(673, J$.Rt(665, J$.M(657, J$.R(641, 't', t, 1), 'unionTypeAnnotation', 0)(J$.R(649, 'flattened', flattened, 0))));
                            }
                        } catch (J$e) {
                            J$.Ex(2513, J$e);
                        } finally {
                            if (J$.Fr(2521))
                                continue jalangiLabel436;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function removeTypeDuplicates(nodes) {
                jalangiLabel437:
                    while (true) {
                        try {
                            J$.Fe(1801, arguments.callee, this, arguments);
                            arguments = J$.N(1809, 'arguments', arguments, 4);
                            nodes = J$.N(1817, 'nodes', nodes, 4);
                            J$.N(1825, 'generics', generics, 0);
                            J$.N(1833, 'bases', bases, 0);
                            J$.N(1841, 'typeGroups', typeGroups, 0);
                            J$.N(1849, 'types', types, 0);
                            J$.N(1857, 'i', i, 0);
                            J$.N(1865, 'node', node, 0);
                            J$.N(1873, 'name', name, 0);
                            J$.N(1881, 'existing', existing, 0);
                            J$.N(1889, 'type', type, 0);
                            J$.N(1897, '_name', _name, 0);
                            var generics = J$.X1(729, J$.W(721, 'generics', J$.T(713, {}, 11, false), generics, 1));
                            var bases = J$.X1(753, J$.W(745, 'bases', J$.T(737, {}, 11, false), bases, 1));
                            var typeGroups = J$.X1(777, J$.W(769, 'typeGroups', J$.T(761, [], 10, false), typeGroups, 1));
                            var types = J$.X1(801, J$.W(793, 'types', J$.T(785, [], 10, false), types, 1));
                            for (var i = J$.X1(825, J$.W(817, 'i', J$.T(809, 0, 22, false), i, 1)); J$.X1(2609, J$.C(128, J$.B(26, '<', J$.R(833, 'i', i, 0), J$.G(849, J$.R(841, 'nodes', nodes, 0), 'length', 0), 0))); J$.X1(2617, J$.B(50, '-', i = J$.W(873, 'i', J$.B(42, '+', J$.U(34, '+', J$.R(865, 'i', i, 0)), J$.T(857, 1, 22, false), 0), i, 0), J$.T(881, 1, 22, false), 0))) {
                                var node = J$.X1(921, J$.W(913, 'node', J$.G(905, J$.R(889, 'nodes', nodes, 0), J$.R(897, 'i', i, 0), 4), node, 1));
                                if (J$.X1(2529, J$.C(48, J$.U(58, '!', J$.R(929, 'node', node, 0)))))
                                    continue;
                                if (J$.X1(2537, J$.C(56, J$.B(66, '>=', J$.M(953, J$.R(937, 'types', types, 0), 'indexOf', 0)(J$.R(945, 'node', node, 0)), J$.T(961, 0, 22, false), 0)))) {
                                    continue;
                                }
                                if (J$.X1(2545, J$.C(64, J$.M(985, J$.R(969, 't', t, 1), 'isAnyTypeAnnotation', 0)(J$.R(977, 'node', node, 0))))) {
                                    return J$.X1(1017, J$.Rt(1009, J$.T(1001, [J$.R(993, 'node', node, 0)], 10, false)));
                                }
                                if (J$.X1(2553, J$.C(72, J$.M(1041, J$.R(1025, 't', t, 1), 'isFlowBaseAnnotation', 0)(J$.R(1033, 'node', node, 0))))) {
                                    J$.X1(1089, J$.P(1081, J$.R(1049, 'bases', bases, 0), J$.G(1065, J$.R(1057, 'node', node, 0), 'type', 0), J$.R(1073, 'node', node, 0), 2));
                                    continue;
                                }
                                if (J$.X1(2569, J$.C(88, J$.M(1113, J$.R(1097, 't', t, 1), 'isUnionTypeAnnotation', 0)(J$.R(1105, 'node', node, 0))))) {
                                    if (J$.X1(2561, J$.C(80, J$.B(74, '<', J$.M(1145, J$.R(1121, 'typeGroups', typeGroups, 0), 'indexOf', 0)(J$.G(1137, J$.R(1129, 'node', node, 0), 'types', 0)), J$.T(1153, 0, 22, false), 0)))) {
                                        J$.X1(1201, nodes = J$.W(1193, 'nodes', J$.M(1185, J$.R(1161, 'nodes', nodes, 0), 'concat', 0)(J$.G(1177, J$.R(1169, 'node', node, 0), 'types', 0)), nodes, 0));
                                        J$.X1(1241, J$.M(1233, J$.R(1209, 'typeGroups', typeGroups, 0), 'push', 0)(J$.G(1225, J$.R(1217, 'node', node, 0), 'types', 0)));
                                    }
                                    continue;
                                }
                                if (J$.X1(2601, J$.C(120, J$.M(1265, J$.R(1249, 't', t, 1), 'isGenericTypeAnnotation', 0)(J$.R(1257, 'node', node, 0))))) {
                                    var name = J$.X1(1305, J$.W(1297, 'name', J$.G(1289, J$.G(1281, J$.R(1273, 'node', node, 0), 'id', 0), 'name', 0), name, 1));
                                    if (J$.X1(2593, J$.C(112, J$.G(1329, J$.R(1313, 'generics', generics, 0), J$.R(1321, 'name', name, 0), 4)))) {
                                        var existing = J$.X1(1369, J$.W(1361, 'existing', J$.G(1353, J$.R(1337, 'generics', generics, 0), J$.R(1345, 'name', name, 0), 4), existing, 1));
                                        if (J$.X1(2585, J$.C(104, J$.G(1385, J$.R(1377, 'existing', existing, 0), 'typeParameters', 0)))) {
                                            if (J$.X1(2577, J$.C(96, J$.G(1401, J$.R(1393, 'node', node, 0), 'typeParameters', 0)))) {
                                                J$.X1(1505, J$.P(1497, J$.G(1417, J$.R(1409, 'existing', existing, 0), 'typeParameters', 0), 'params', J$.F(1489, J$.R(1425, 'removeTypeDuplicates', removeTypeDuplicates, 1), 0)(J$.M(1481, J$.G(1449, J$.G(1441, J$.R(1433, 'existing', existing, 0), 'typeParameters', 0), 'params', 0), 'concat', 0)(J$.G(1473, J$.G(1465, J$.R(1457, 'node', node, 0), 'typeParameters', 0), 'params', 0))), 0));
                                            }
                                        } else {
                                            J$.X1(1537, existing = J$.W(1529, 'existing', J$.G(1521, J$.R(1513, 'node', node, 0), 'typeParameters', 0), existing, 0));
                                        }
                                    } else {
                                        J$.X1(1577, J$.P(1569, J$.R(1545, 'generics', generics, 0), J$.R(1553, 'name', name, 0), J$.R(1561, 'node', node, 0), 2));
                                    }
                                    continue;
                                }
                                J$.X1(1609, J$.M(1601, J$.R(1585, 'types', types, 0), 'push', 0)(J$.R(1593, 'node', node, 0)));
                            }
                            for (J$._tm_p in J$.H(1673, J$.R(1617, 'bases', bases, 0))) {
                                var type = J$.X1(1689, J$.W(1681, 'type', J$._tm_p, type, 1));
                                {
                                    {
                                        J$.X1(1665, J$.M(1657, J$.R(1625, 'types', types, 0), 'push', 0)(J$.G(1649, J$.R(1633, 'bases', bases, 0), J$.R(1641, 'type', type, 0), 4)));
                                    }
                                }
                            }
                            for (J$._tm_p in J$.H(1753, J$.R(1697, 'generics', generics, 0))) {
                                var _name = J$.X1(1769, J$.W(1761, '_name', J$._tm_p, _name, 1));
                                {
                                    {
                                        J$.X1(1745, J$.M(1737, J$.R(1705, 'types', types, 0), 'push', 0)(J$.G(1729, J$.R(1713, 'generics', generics, 0), J$.R(1721, '_name', _name, 0), 4)));
                                    }
                                }
                            }
                            return J$.X1(1793, J$.Rt(1785, J$.R(1777, 'types', types, 0)));
                        } catch (J$e) {
                            J$.Ex(2625, J$e);
                        } finally {
                            if (J$.Fr(2633))
                                continue jalangiLabel437;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function createTypeAnnotationBasedOnTypeof(type) {
                jalangiLabel438:
                    while (true) {
                        try {
                            J$.Fe(2353, arguments.callee, this, arguments);
                            arguments = J$.N(2361, 'arguments', arguments, 4);
                            type = J$.N(2369, 'type', type, 4);
                            if (J$.X1(2689, J$.C(184, J$.B(82, '===', J$.R(1905, 'type', type, 0), J$.T(1913, "string", 21, false), 0)))) {
                                return J$.X1(1945, J$.Rt(1937, J$.M(1929, J$.R(1921, 't', t, 1), 'stringTypeAnnotation', 0)()));
                            } else if (J$.X1(2681, J$.C(176, J$.B(90, '===', J$.R(1953, 'type', type, 0), J$.T(1961, "number", 21, false), 0)))) {
                                return J$.X1(1993, J$.Rt(1985, J$.M(1977, J$.R(1969, 't', t, 1), 'numberTypeAnnotation', 0)()));
                            } else if (J$.X1(2673, J$.C(168, J$.B(98, '===', J$.R(2001, 'type', type, 0), J$.T(2009, "undefined", 21, false), 0)))) {
                                return J$.X1(2041, J$.Rt(2033, J$.M(2025, J$.R(2017, 't', t, 1), 'voidTypeAnnotation', 0)()));
                            } else if (J$.X1(2665, J$.C(160, J$.B(106, '===', J$.R(2049, 'type', type, 0), J$.T(2057, "boolean", 21, false), 0)))) {
                                return J$.X1(2089, J$.Rt(2081, J$.M(2073, J$.R(2065, 't', t, 1), 'booleanTypeAnnotation', 0)()));
                            } else if (J$.X1(2657, J$.C(152, J$.B(114, '===', J$.R(2097, 'type', type, 0), J$.T(2105, "function", 21, false), 0)))) {
                                return J$.X1(2161, J$.Rt(2153, J$.M(2145, J$.R(2113, 't', t, 1), 'genericTypeAnnotation', 0)(J$.M(2137, J$.R(2121, 't', t, 1), 'identifier', 0)(J$.T(2129, "Function", 21, false)))));
                            } else if (J$.X1(2649, J$.C(144, J$.B(122, '===', J$.R(2169, 'type', type, 0), J$.T(2177, "object", 21, false), 0)))) {
                                return J$.X1(2233, J$.Rt(2225, J$.M(2217, J$.R(2185, 't', t, 1), 'genericTypeAnnotation', 0)(J$.M(2209, J$.R(2193, 't', t, 1), 'identifier', 0)(J$.T(2201, "Object", 21, false)))));
                            } else if (J$.X1(2641, J$.C(136, J$.B(130, '===', J$.R(2241, 'type', type, 0), J$.T(2249, "symbol", 21, false), 0)))) {
                                return J$.X1(2305, J$.Rt(2297, J$.M(2289, J$.R(2257, 't', t, 1), 'genericTypeAnnotation', 0)(J$.M(2281, J$.R(2265, 't', t, 1), 'identifier', 0)(J$.T(2273, "Symbol", 21, false)))));
                            } else {
                                throw J$.X1(2345, J$.Th(2337, J$.F(2329, J$.R(2313, 'Error', Error, 2), 1)(J$.T(2321, "Invalid typeof value", 21, false))));
                            }
                        } catch (J$e) {
                            J$.Ex(2697, J$e);
                        } finally {
                            if (J$.Fr(2705))
                                continue jalangiLabel438;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(2385, '_index', _index, 0);
            J$.N(2393, 't', t, 0);
            _interopRequireWildcard = J$.N(2409, '_interopRequireWildcard', J$.T(2401, _interopRequireWildcard, 12, false, 497), 0);
            createUnionTypeAnnotation = J$.N(2425, 'createUnionTypeAnnotation', J$.T(2417, createUnionTypeAnnotation, 12, false, 681), 0);
            removeTypeDuplicates = J$.N(2441, 'removeTypeDuplicates', J$.T(2433, removeTypeDuplicates, 12, false, 1801), 0);
            createTypeAnnotationBasedOnTypeof = J$.N(2457, 'createTypeAnnotationBasedOnTypeof', J$.T(2449, createTypeAnnotationBasedOnTypeof, 12, false, 2353), 0);
            J$.X1(33, J$.P(25, J$.R(9, 'exports', exports, 2), '__esModule', J$.T(17, true, 23, false), 0));
            J$.X1(65, J$.P(57, J$.R(41, 'exports', exports, 2), 'createUnionTypeAnnotation', J$.R(49, 'createUnionTypeAnnotation', createUnionTypeAnnotation, 1), 0));
            J$.X1(97, J$.P(89, J$.R(73, 'exports', exports, 2), 'removeTypeDuplicates', J$.R(81, 'removeTypeDuplicates', removeTypeDuplicates, 1), 0));
            J$.X1(129, J$.P(121, J$.R(105, 'exports', exports, 2), 'createTypeAnnotationBasedOnTypeof', J$.R(113, 'createTypeAnnotationBasedOnTypeof', createTypeAnnotationBasedOnTypeof, 1), 0));
            var _index = J$.X1(169, J$.W(161, '_index', J$.F(153, J$.R(137, 'require', require, 2), 0)(J$.T(145, "./index", 21, false)), _index, 3));
            var t = J$.X1(209, J$.W(201, 't', J$.F(193, J$.R(177, '_interopRequireWildcard', _interopRequireWildcard, 1), 0)(J$.R(185, '_index', _index, 1)), t, 3));
        } catch (J$e) {
            J$.Ex(2713, J$e);
        } finally {
            if (J$.Sr(2721)) {
                J$.L();
                continue jalangiLabel439;
            } else {
                J$.L();
                break jalangiLabel439;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
