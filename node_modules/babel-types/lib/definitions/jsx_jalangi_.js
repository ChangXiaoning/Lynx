J$.iids = {"8":[6,46,6,67],"9":[2,14,2,21],"16":[6,46,6,67],"17":[2,22,2,31],"25":[2,14,2,32],"33":[2,14,2,32],"41":[2,14,2,32],"49":[4,15,4,37],"57":[4,38,4,44],"65":[4,15,4,45],"73":[4,15,4,45],"81":[4,15,4,45],"89":[6,46,6,49],"97":[6,53,6,56],"105":[6,53,6,67],"113":[6,70,6,73],"121":[6,87,6,90],"129":[6,76,6,92],"137":[6,46,6,92],"145":[6,39,6,93],"153":[6,1,6,94],"161":[6,1,6,94],"169":[6,1,6,94],"177":[8,2,8,3],"185":[8,5,8,12],"193":[8,5,8,20],"201":[8,2,8,3],"209":[8,22,8,36],"217":[9,13,9,19],"225":[9,21,9,28],"233":[9,12,9,29],"241":[10,13,10,18],"249":[10,20,10,31],"257":[10,12,10,32],"265":[13,18,13,19],"273":[13,21,13,27],"281":[13,21,13,42],"289":[13,18,13,19],"297":[13,44,13,59],"305":[13,61,13,80],"313":[13,17,13,81],"321":[12,11,13,83],"329":[16,17,16,21],"337":[17,18,17,19],"345":[17,21,17,27],"353":[17,21,17,42],"361":[17,18,17,19],"369":[17,44,17,56],"377":[17,58,17,73],"385":[17,75,17,99],"393":[17,17,17,100],"401":[15,12,17,102],"409":[11,11,17,104],"417":[8,38,17,106],"425":[8,1,17,107],"433":[8,1,17,108],"441":[22,2,22,3],"449":[22,5,22,12],"457":[22,5,22,20],"465":[22,2,22,3],"473":[22,22,22,41],"481":[23,13,23,19],"489":[23,12,23,20],"497":[24,13,24,18],"505":[24,20,24,31],"513":[24,12,24,32],"521":[27,18,27,19],"529":[27,21,27,27],"537":[27,21,27,42],"545":[27,18,27,19],"553":[27,44,27,59],"561":[27,61,27,82],"569":[27,17,27,83],"577":[26,11,27,85],"585":[25,11,27,87],"593":[22,43,27,89],"601":[22,1,27,90],"609":[22,1,27,91],"617":[32,2,32,3],"625":[32,5,32,12],"633":[32,5,32,20],"641":[32,2,32,3],"649":[32,22,32,34],"657":[33,13,33,29],"665":[33,31,33,47],"673":[33,49,33,59],"681":[33,61,33,74],"689":[33,12,33,75],"697":[34,13,34,29],"705":[34,31,34,41],"713":[34,43,34,59],"721":[34,12,34,60],"729":[35,13,35,18],"737":[35,20,35,31],"745":[35,33,35,45],"753":[35,12,35,46],"761":[38,18,38,19],"769":[38,21,38,27],"777":[38,21,38,42],"785":[38,18,38,19],"793":[38,44,38,63],"801":[38,17,38,64],"809":[37,21,38,66],"817":[41,17,41,21],"825":[42,18,42,19],"833":[42,21,42,27],"841":[42,21,42,42],"849":[42,18,42,19],"857":[42,44,42,63],"865":[42,17,42,64],"873":[40,21,42,66],"881":[45,18,45,19],"889":[45,21,45,27],"897":[45,21,45,33],"905":[45,18,45,19],"913":[45,36,45,37],"921":[45,39,45,45],"929":[45,39,45,61],"937":[45,36,45,37],"945":[45,63,45,70],"953":[45,35,45,71],"961":[45,74,45,75],"969":[45,77,45,83],"977":[45,77,45,94],"985":[45,74,45,75],"993":[45,97,45,98],"1001":[45,100,45,106],"1009":[45,100,45,121],"1017":[45,97,45,98],"1025":[45,123,45,132],"1033":[45,134,45,158],"1041":[45,160,45,176],"1049":[45,178,45,190],"1057":[45,96,45,191],"1065":[45,73,45,192],"1073":[45,17,45,193],"1081":[44,15,45,195],"1089":[36,11,45,197],"1097":[32,36,45,199],"1105":[32,1,45,200],"1113":[32,1,45,201],"1121":[50,2,50,3],"1129":[50,5,50,12],"1137":[50,5,50,20],"1145":[50,2,50,3],"1153":[50,22,50,42],"1161":[51,13,51,18],"1169":[51,20,51,32],"1177":[51,12,51,33],"1185":[50,44,51,35],"1193":[50,1,51,36],"1201":[50,1,51,37],"1209":[54,2,54,3],"1217":[54,5,54,12],"1225":[54,5,54,20],"1233":[54,2,54,3],"1241":[54,22,54,46],"1249":[55,13,55,25],"1257":[55,12,55,26],"1265":[56,13,56,18],"1273":[56,20,56,31],"1281":[56,12,56,32],"1289":[59,18,59,19],"1297":[59,21,59,27],"1305":[59,21,59,42],"1313":[59,18,59,19],"1321":[59,44,59,56],"1329":[59,17,59,57],"1337":[58,17,59,59],"1345":[57,11,59,61],"1353":[54,48,59,63],"1361":[54,1,59,64],"1369":[54,1,59,65],"1377":[64,2,64,3],"1385":[64,5,64,12],"1393":[64,5,64,20],"1401":[64,2,64,3],"1409":[64,22,64,38],"1417":[65,13,65,25],"1425":[65,12,65,26],"1433":[66,13,66,18],"1441":[66,20,66,31],"1449":[66,12,66,32],"1457":[69,18,69,19],"1465":[69,21,69,27],"1473":[69,21,69,42],"1481":[69,18,69,19],"1489":[69,44,69,56],"1497":[69,17,69,57],"1505":[68,17,69,59],"1513":[67,11,69,61],"1521":[64,40,69,63],"1529":[64,1,69,64],"1537":[64,1,69,65],"1545":[74,2,74,3],"1553":[74,5,74,12],"1561":[74,5,74,20],"1569":[74,2,74,3],"1577":[74,22,74,37],"1585":[75,13,75,19],"1593":[75,12,75,20],"1601":[76,13,76,18],"1609":[76,20,76,32],"1617":[76,12,76,33],"1625":[79,18,79,19],"1633":[79,21,79,27],"1641":[79,21,79,43],"1649":[79,18,79,19],"1657":[79,45,79,53],"1665":[79,17,79,54],"1673":[78,11,79,56],"1681":[77,11,79,58],"1689":[74,39,79,60],"1697":[74,1,79,61],"1705":[74,1,79,62],"1713":[84,2,84,3],"1721":[84,5,84,12],"1729":[84,5,84,20],"1737":[84,2,84,3],"1745":[84,22,84,43],"1753":[85,13,85,21],"1761":[85,23,85,33],"1769":[85,12,85,34],"1777":[86,13,86,18],"1785":[86,20,86,32],"1793":[86,12,86,33],"1801":[89,18,89,19],"1809":[89,21,89,27],"1817":[89,21,89,42],"1825":[89,18,89,19],"1833":[89,44,89,65],"1841":[89,67,89,82],"1849":[89,17,89,83],"1857":[88,13,89,85],"1865":[92,18,92,19],"1873":[92,21,92,27],"1881":[92,21,92,42],"1889":[92,18,92,19],"1897":[92,44,92,59],"1905":[92,17,92,60],"1913":[91,15,92,62],"1921":[87,11,92,64],"1929":[84,45,92,66],"1937":[84,1,92,67],"1945":[84,1,92,68],"1953":[97,2,97,3],"1961":[97,5,97,12],"1969":[97,5,97,20],"1977":[97,2,97,3],"1985":[97,22,97,41],"1993":[98,13,98,24],"2001":[98,26,98,32],"2009":[98,12,98,33],"2017":[99,13,99,18],"2025":[99,12,99,19],"2033":[102,18,102,19],"2041":[102,21,102,27],"2049":[102,21,102,42],"2057":[102,18,102,19],"2065":[102,44,102,59],"2073":[102,17,102,60],"2081":[101,16,102,62],"2089":[105,18,105,19],"2097":[105,21,105,27],"2105":[105,21,105,42],"2113":[105,18,105,19],"2121":[105,44,105,59],"2129":[105,17,105,60],"2137":[104,11,105,62],"2145":[100,11,105,64],"2153":[97,43,105,66],"2161":[97,1,105,67],"2169":[97,1,105,68],"2177":[110,2,110,3],"2185":[110,5,110,12],"2193":[110,5,110,20],"2201":[110,2,110,3],"2209":[110,22,110,41],"2217":[111,13,111,19],"2225":[111,21,111,33],"2233":[111,35,111,48],"2241":[111,12,111,49],"2249":[112,13,112,19],"2257":[112,21,112,33],"2265":[112,12,112,34],"2273":[113,13,113,18],"2281":[113,20,113,31],"2289":[113,12,113,32],"2297":[116,18,116,19],"2305":[116,21,116,27],"2313":[116,21,116,42],"2321":[116,18,116,19],"2329":[116,44,116,59],"2337":[116,61,116,82],"2345":[116,17,116,83],"2353":[115,11,116,85],"2361":[119,16,119,21],"2369":[120,18,120,19],"2377":[120,21,120,27],"2385":[120,21,120,43],"2393":[120,18,120,19],"2401":[120,45,120,54],"2409":[120,17,120,55],"2417":[118,18,120,57],"2425":[123,18,123,19],"2433":[123,21,123,27],"2441":[123,21,123,33],"2449":[123,18,123,19],"2457":[123,36,123,37],"2465":[123,39,123,45],"2473":[123,39,123,61],"2481":[123,36,123,37],"2489":[123,63,123,70],"2497":[123,35,123,71],"2505":[123,74,123,75],"2513":[123,77,123,83],"2521":[123,77,123,94],"2529":[123,74,123,75],"2537":[123,97,123,98],"2545":[123,100,123,106],"2553":[123,100,123,121],"2561":[123,97,123,98],"2569":[123,123,123,137],"2577":[123,139,123,159],"2585":[123,96,123,160],"2593":[123,73,123,161],"2601":[123,17,123,162],"2609":[122,17,123,164],"2617":[114,11,123,166],"2625":[110,43,123,168],"2633":[110,1,123,169],"2641":[110,1,123,170],"2649":[128,2,128,3],"2657":[128,5,128,12],"2665":[128,5,128,20],"2673":[128,2,128,3],"2681":[128,22,128,42],"2689":[129,13,129,23],"2697":[129,12,129,24],"2705":[130,13,130,18],"2713":[130,12,130,19],"2721":[133,18,133,19],"2729":[133,21,133,27],"2737":[133,21,133,42],"2745":[133,18,133,19],"2753":[133,44,133,56],"2761":[133,17,133,57],"2769":[132,15,133,59],"2777":[131,11,133,61],"2785":[128,44,133,63],"2793":[128,1,133,64],"2801":[128,1,133,65],"2809":[138,2,138,3],"2817":[138,5,138,12],"2825":[138,5,138,20],"2833":[138,2,138,3],"2841":[138,22,138,31],"2849":[139,13,139,18],"2857":[139,20,139,31],"2865":[139,12,139,32],"2873":[140,13,140,20],"2881":[140,12,140,21],"2889":[143,18,143,19],"2897":[143,21,143,27],"2905":[143,21,143,43],"2913":[143,18,143,19],"2921":[143,45,143,53],"2929":[143,17,143,54],"2937":[142,12,143,56],"2945":[141,11,143,58],"2953":[138,33,143,60],"2961":[138,1,143,61],"2969":[138,1,143,62],"2977":[1,1,143,62],"2985":[1,1,143,62],"2993":[1,1,143,62],"3001":[6,1,6,94],"3009":[1,1,143,62],"3017":[6,46,6,92],"3025":[6,1,6,94],"3033":[6,1,6,94],"3041":[1,1,143,62],"3049":[1,1,143,62],"nBranches":4,"originalCodeFileName":"/home/james/nodejs/HiPar/node_modules/babel-types/lib/definitions/jsx.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/node_modules/babel-types/lib/definitions/jsx_jalangi_.js","code":"\"use strict\";\n\nvar _index = require(\"./index\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index2.default)(\"JSXAttribute\", {\n  visitor: [\"name\", \"value\"],\n  aliases: [\"JSX\", \"Immutable\"],\n  fields: {\n    name: {\n      validate: (0, _index.assertNodeType)(\"JSXIdentifier\", \"JSXNamespacedName\")\n    },\n    value: {\n      optional: true,\n      validate: (0, _index.assertNodeType)(\"JSXElement\", \"StringLiteral\", \"JSXExpressionContainer\")\n    }\n  }\n});\n\n(0, _index2.default)(\"JSXClosingElement\", {\n  visitor: [\"name\"],\n  aliases: [\"JSX\", \"Immutable\"],\n  fields: {\n    name: {\n      validate: (0, _index.assertNodeType)(\"JSXIdentifier\", \"JSXMemberExpression\")\n    }\n  }\n});\n\n(0, _index2.default)(\"JSXElement\", {\n  builder: [\"openingElement\", \"closingElement\", \"children\", \"selfClosing\"],\n  visitor: [\"openingElement\", \"children\", \"closingElement\"],\n  aliases: [\"JSX\", \"Immutable\", \"Expression\"],\n  fields: {\n    openingElement: {\n      validate: (0, _index.assertNodeType)(\"JSXOpeningElement\")\n    },\n    closingElement: {\n      optional: true,\n      validate: (0, _index.assertNodeType)(\"JSXClosingElement\")\n    },\n    children: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"JSXText\", \"JSXExpressionContainer\", \"JSXSpreadChild\", \"JSXElement\")))\n    }\n  }\n});\n\n(0, _index2.default)(\"JSXEmptyExpression\", {\n  aliases: [\"JSX\", \"Expression\"]\n});\n\n(0, _index2.default)(\"JSXExpressionContainer\", {\n  visitor: [\"expression\"],\n  aliases: [\"JSX\", \"Immutable\"],\n  fields: {\n    expression: {\n      validate: (0, _index.assertNodeType)(\"Expression\")\n    }\n  }\n});\n\n(0, _index2.default)(\"JSXSpreadChild\", {\n  visitor: [\"expression\"],\n  aliases: [\"JSX\", \"Immutable\"],\n  fields: {\n    expression: {\n      validate: (0, _index.assertNodeType)(\"Expression\")\n    }\n  }\n});\n\n(0, _index2.default)(\"JSXIdentifier\", {\n  builder: [\"name\"],\n  aliases: [\"JSX\", \"Expression\"],\n  fields: {\n    name: {\n      validate: (0, _index.assertValueType)(\"string\")\n    }\n  }\n});\n\n(0, _index2.default)(\"JSXMemberExpression\", {\n  visitor: [\"object\", \"property\"],\n  aliases: [\"JSX\", \"Expression\"],\n  fields: {\n    object: {\n      validate: (0, _index.assertNodeType)(\"JSXMemberExpression\", \"JSXIdentifier\")\n    },\n    property: {\n      validate: (0, _index.assertNodeType)(\"JSXIdentifier\")\n    }\n  }\n});\n\n(0, _index2.default)(\"JSXNamespacedName\", {\n  visitor: [\"namespace\", \"name\"],\n  aliases: [\"JSX\"],\n  fields: {\n    namespace: {\n      validate: (0, _index.assertNodeType)(\"JSXIdentifier\")\n    },\n    name: {\n      validate: (0, _index.assertNodeType)(\"JSXIdentifier\")\n    }\n  }\n});\n\n(0, _index2.default)(\"JSXOpeningElement\", {\n  builder: [\"name\", \"attributes\", \"selfClosing\"],\n  visitor: [\"name\", \"attributes\"],\n  aliases: [\"JSX\", \"Immutable\"],\n  fields: {\n    name: {\n      validate: (0, _index.assertNodeType)(\"JSXIdentifier\", \"JSXMemberExpression\")\n    },\n    selfClosing: {\n      default: false,\n      validate: (0, _index.assertValueType)(\"boolean\")\n    },\n    attributes: {\n      validate: (0, _index.chain)((0, _index.assertValueType)(\"array\"), (0, _index.assertEach)((0, _index.assertNodeType)(\"JSXAttribute\", \"JSXSpreadAttribute\")))\n    }\n  }\n});\n\n(0, _index2.default)(\"JSXSpreadAttribute\", {\n  visitor: [\"argument\"],\n  aliases: [\"JSX\"],\n  fields: {\n    argument: {\n      validate: (0, _index.assertNodeType)(\"Expression\")\n    }\n  }\n});\n\n(0, _index2.default)(\"JSXText\", {\n  aliases: [\"JSX\", \"Immutable\"],\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _index.assertValueType)(\"string\")\n    }\n  }\n});"};
jalangiLabel705:
    while (true) {
        try {
            J$.Se(2977, '/home/james/nodejs/HiPar/node_modules/babel-types/lib/definitions/jsx_jalangi_.js', '/home/james/nodejs/HiPar/node_modules/babel-types/lib/definitions/jsx.js');
            function _interopRequireDefault(obj) {
                jalangiLabel704:
                    while (true) {
                        try {
                            J$.Fe(153, arguments.callee, this, arguments);
                            arguments = J$.N(161, 'arguments', arguments, 4);
                            obj = J$.N(169, 'obj', obj, 4);
                            return J$.X1(145, J$.Rt(137, J$.X1(3017, J$.C(16, J$.C(8, J$.R(89, 'obj', obj, 0)) ? J$.G(105, J$.R(97, 'obj', obj, 0), '__esModule', 0) : J$._())) ? J$.R(113, 'obj', obj, 0) : J$.T(129, {
                                default: J$.R(121, 'obj', obj, 0)
                            }, 11, false)));
                        } catch (J$e) {
                            J$.Ex(3025, J$e);
                        } finally {
                            if (J$.Fr(3033))
                                continue jalangiLabel704;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(2985, '_index', _index, 0);
            J$.N(2993, '_index2', _index2, 0);
            _interopRequireDefault = J$.N(3009, '_interopRequireDefault', J$.T(3001, _interopRequireDefault, 12, false, 153), 0);
            var _index = J$.X1(41, J$.W(33, '_index', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, "./index", 21, false)), _index, 3));
            var _index2 = J$.X1(81, J$.W(73, '_index2', J$.F(65, J$.R(49, '_interopRequireDefault', _interopRequireDefault, 1), 0)(J$.R(57, '_index', _index, 1)), _index2, 3));
            J$.X1(433, J$.F(425, (J$.X1(201, J$.T(177, 0, 22, false)), J$.G(193, J$.R(185, '_index2', _index2, 1), 'default', 0)), 0)(J$.T(209, "JSXAttribute", 21, false), J$.T(417, {
                visitor: J$.T(233, [
                    J$.T(217, "name", 21, false),
                    J$.T(225, "value", 21, false)
                ], 10, false),
                aliases: J$.T(257, [
                    J$.T(241, "JSX", 21, false),
                    J$.T(249, "Immutable", 21, false)
                ], 10, false),
                fields: J$.T(409, {
                    name: J$.T(321, {
                        validate: J$.F(313, (J$.X1(289, J$.T(265, 0, 22, false)), J$.G(281, J$.R(273, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(297, "JSXIdentifier", 21, false), J$.T(305, "JSXNamespacedName", 21, false))
                    }, 11, false),
                    value: J$.T(401, {
                        optional: J$.T(329, true, 23, false),
                        validate: J$.F(393, (J$.X1(361, J$.T(337, 0, 22, false)), J$.G(353, J$.R(345, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(369, "JSXElement", 21, false), J$.T(377, "StringLiteral", 21, false), J$.T(385, "JSXExpressionContainer", 21, false))
                    }, 11, false)
                }, 11, false)
            }, 11, false)));
            J$.X1(609, J$.F(601, (J$.X1(465, J$.T(441, 0, 22, false)), J$.G(457, J$.R(449, '_index2', _index2, 1), 'default', 0)), 0)(J$.T(473, "JSXClosingElement", 21, false), J$.T(593, {
                visitor: J$.T(489, [J$.T(481, "name", 21, false)], 10, false),
                aliases: J$.T(513, [
                    J$.T(497, "JSX", 21, false),
                    J$.T(505, "Immutable", 21, false)
                ], 10, false),
                fields: J$.T(585, {
                    name: J$.T(577, {
                        validate: J$.F(569, (J$.X1(545, J$.T(521, 0, 22, false)), J$.G(537, J$.R(529, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(553, "JSXIdentifier", 21, false), J$.T(561, "JSXMemberExpression", 21, false))
                    }, 11, false)
                }, 11, false)
            }, 11, false)));
            J$.X1(1113, J$.F(1105, (J$.X1(641, J$.T(617, 0, 22, false)), J$.G(633, J$.R(625, '_index2', _index2, 1), 'default', 0)), 0)(J$.T(649, "JSXElement", 21, false), J$.T(1097, {
                builder: J$.T(689, [
                    J$.T(657, "openingElement", 21, false),
                    J$.T(665, "closingElement", 21, false),
                    J$.T(673, "children", 21, false),
                    J$.T(681, "selfClosing", 21, false)
                ], 10, false),
                visitor: J$.T(721, [
                    J$.T(697, "openingElement", 21, false),
                    J$.T(705, "children", 21, false),
                    J$.T(713, "closingElement", 21, false)
                ], 10, false),
                aliases: J$.T(753, [
                    J$.T(729, "JSX", 21, false),
                    J$.T(737, "Immutable", 21, false),
                    J$.T(745, "Expression", 21, false)
                ], 10, false),
                fields: J$.T(1089, {
                    openingElement: J$.T(809, {
                        validate: J$.F(801, (J$.X1(785, J$.T(761, 0, 22, false)), J$.G(777, J$.R(769, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(793, "JSXOpeningElement", 21, false))
                    }, 11, false),
                    closingElement: J$.T(873, {
                        optional: J$.T(817, true, 23, false),
                        validate: J$.F(865, (J$.X1(849, J$.T(825, 0, 22, false)), J$.G(841, J$.R(833, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(857, "JSXClosingElement", 21, false))
                    }, 11, false),
                    children: J$.T(1081, {
                        validate: J$.F(1073, (J$.X1(905, J$.T(881, 0, 22, false)), J$.G(897, J$.R(889, '_index', _index, 1), 'chain', 0)), 0)(J$.F(953, (J$.X1(937, J$.T(913, 0, 22, false)), J$.G(929, J$.R(921, '_index', _index, 1), 'assertValueType', 0)), 0)(J$.T(945, "array", 21, false)), J$.F(1065, (J$.X1(985, J$.T(961, 0, 22, false)), J$.G(977, J$.R(969, '_index', _index, 1), 'assertEach', 0)), 0)(J$.F(1057, (J$.X1(1017, J$.T(993, 0, 22, false)), J$.G(1009, J$.R(1001, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(1025, "JSXText", 21, false), J$.T(1033, "JSXExpressionContainer", 21, false), J$.T(1041, "JSXSpreadChild", 21, false), J$.T(1049, "JSXElement", 21, false))))
                    }, 11, false)
                }, 11, false)
            }, 11, false)));
            J$.X1(1201, J$.F(1193, (J$.X1(1145, J$.T(1121, 0, 22, false)), J$.G(1137, J$.R(1129, '_index2', _index2, 1), 'default', 0)), 0)(J$.T(1153, "JSXEmptyExpression", 21, false), J$.T(1185, {
                aliases: J$.T(1177, [
                    J$.T(1161, "JSX", 21, false),
                    J$.T(1169, "Expression", 21, false)
                ], 10, false)
            }, 11, false)));
            J$.X1(1369, J$.F(1361, (J$.X1(1233, J$.T(1209, 0, 22, false)), J$.G(1225, J$.R(1217, '_index2', _index2, 1), 'default', 0)), 0)(J$.T(1241, "JSXExpressionContainer", 21, false), J$.T(1353, {
                visitor: J$.T(1257, [J$.T(1249, "expression", 21, false)], 10, false),
                aliases: J$.T(1281, [
                    J$.T(1265, "JSX", 21, false),
                    J$.T(1273, "Immutable", 21, false)
                ], 10, false),
                fields: J$.T(1345, {
                    expression: J$.T(1337, {
                        validate: J$.F(1329, (J$.X1(1313, J$.T(1289, 0, 22, false)), J$.G(1305, J$.R(1297, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(1321, "Expression", 21, false))
                    }, 11, false)
                }, 11, false)
            }, 11, false)));
            J$.X1(1537, J$.F(1529, (J$.X1(1401, J$.T(1377, 0, 22, false)), J$.G(1393, J$.R(1385, '_index2', _index2, 1), 'default', 0)), 0)(J$.T(1409, "JSXSpreadChild", 21, false), J$.T(1521, {
                visitor: J$.T(1425, [J$.T(1417, "expression", 21, false)], 10, false),
                aliases: J$.T(1449, [
                    J$.T(1433, "JSX", 21, false),
                    J$.T(1441, "Immutable", 21, false)
                ], 10, false),
                fields: J$.T(1513, {
                    expression: J$.T(1505, {
                        validate: J$.F(1497, (J$.X1(1481, J$.T(1457, 0, 22, false)), J$.G(1473, J$.R(1465, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(1489, "Expression", 21, false))
                    }, 11, false)
                }, 11, false)
            }, 11, false)));
            J$.X1(1705, J$.F(1697, (J$.X1(1569, J$.T(1545, 0, 22, false)), J$.G(1561, J$.R(1553, '_index2', _index2, 1), 'default', 0)), 0)(J$.T(1577, "JSXIdentifier", 21, false), J$.T(1689, {
                builder: J$.T(1593, [J$.T(1585, "name", 21, false)], 10, false),
                aliases: J$.T(1617, [
                    J$.T(1601, "JSX", 21, false),
                    J$.T(1609, "Expression", 21, false)
                ], 10, false),
                fields: J$.T(1681, {
                    name: J$.T(1673, {
                        validate: J$.F(1665, (J$.X1(1649, J$.T(1625, 0, 22, false)), J$.G(1641, J$.R(1633, '_index', _index, 1), 'assertValueType', 0)), 0)(J$.T(1657, "string", 21, false))
                    }, 11, false)
                }, 11, false)
            }, 11, false)));
            J$.X1(1945, J$.F(1937, (J$.X1(1737, J$.T(1713, 0, 22, false)), J$.G(1729, J$.R(1721, '_index2', _index2, 1), 'default', 0)), 0)(J$.T(1745, "JSXMemberExpression", 21, false), J$.T(1929, {
                visitor: J$.T(1769, [
                    J$.T(1753, "object", 21, false),
                    J$.T(1761, "property", 21, false)
                ], 10, false),
                aliases: J$.T(1793, [
                    J$.T(1777, "JSX", 21, false),
                    J$.T(1785, "Expression", 21, false)
                ], 10, false),
                fields: J$.T(1921, {
                    object: J$.T(1857, {
                        validate: J$.F(1849, (J$.X1(1825, J$.T(1801, 0, 22, false)), J$.G(1817, J$.R(1809, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(1833, "JSXMemberExpression", 21, false), J$.T(1841, "JSXIdentifier", 21, false))
                    }, 11, false),
                    property: J$.T(1913, {
                        validate: J$.F(1905, (J$.X1(1889, J$.T(1865, 0, 22, false)), J$.G(1881, J$.R(1873, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(1897, "JSXIdentifier", 21, false))
                    }, 11, false)
                }, 11, false)
            }, 11, false)));
            J$.X1(2169, J$.F(2161, (J$.X1(1977, J$.T(1953, 0, 22, false)), J$.G(1969, J$.R(1961, '_index2', _index2, 1), 'default', 0)), 0)(J$.T(1985, "JSXNamespacedName", 21, false), J$.T(2153, {
                visitor: J$.T(2009, [
                    J$.T(1993, "namespace", 21, false),
                    J$.T(2001, "name", 21, false)
                ], 10, false),
                aliases: J$.T(2025, [J$.T(2017, "JSX", 21, false)], 10, false),
                fields: J$.T(2145, {
                    namespace: J$.T(2081, {
                        validate: J$.F(2073, (J$.X1(2057, J$.T(2033, 0, 22, false)), J$.G(2049, J$.R(2041, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(2065, "JSXIdentifier", 21, false))
                    }, 11, false),
                    name: J$.T(2137, {
                        validate: J$.F(2129, (J$.X1(2113, J$.T(2089, 0, 22, false)), J$.G(2105, J$.R(2097, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(2121, "JSXIdentifier", 21, false))
                    }, 11, false)
                }, 11, false)
            }, 11, false)));
            J$.X1(2641, J$.F(2633, (J$.X1(2201, J$.T(2177, 0, 22, false)), J$.G(2193, J$.R(2185, '_index2', _index2, 1), 'default', 0)), 0)(J$.T(2209, "JSXOpeningElement", 21, false), J$.T(2625, {
                builder: J$.T(2241, [
                    J$.T(2217, "name", 21, false),
                    J$.T(2225, "attributes", 21, false),
                    J$.T(2233, "selfClosing", 21, false)
                ], 10, false),
                visitor: J$.T(2265, [
                    J$.T(2249, "name", 21, false),
                    J$.T(2257, "attributes", 21, false)
                ], 10, false),
                aliases: J$.T(2289, [
                    J$.T(2273, "JSX", 21, false),
                    J$.T(2281, "Immutable", 21, false)
                ], 10, false),
                fields: J$.T(2617, {
                    name: J$.T(2353, {
                        validate: J$.F(2345, (J$.X1(2321, J$.T(2297, 0, 22, false)), J$.G(2313, J$.R(2305, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(2329, "JSXIdentifier", 21, false), J$.T(2337, "JSXMemberExpression", 21, false))
                    }, 11, false),
                    selfClosing: J$.T(2417, {
                        default: J$.T(2361, false, 23, false),
                        validate: J$.F(2409, (J$.X1(2393, J$.T(2369, 0, 22, false)), J$.G(2385, J$.R(2377, '_index', _index, 1), 'assertValueType', 0)), 0)(J$.T(2401, "boolean", 21, false))
                    }, 11, false),
                    attributes: J$.T(2609, {
                        validate: J$.F(2601, (J$.X1(2449, J$.T(2425, 0, 22, false)), J$.G(2441, J$.R(2433, '_index', _index, 1), 'chain', 0)), 0)(J$.F(2497, (J$.X1(2481, J$.T(2457, 0, 22, false)), J$.G(2473, J$.R(2465, '_index', _index, 1), 'assertValueType', 0)), 0)(J$.T(2489, "array", 21, false)), J$.F(2593, (J$.X1(2529, J$.T(2505, 0, 22, false)), J$.G(2521, J$.R(2513, '_index', _index, 1), 'assertEach', 0)), 0)(J$.F(2585, (J$.X1(2561, J$.T(2537, 0, 22, false)), J$.G(2553, J$.R(2545, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(2569, "JSXAttribute", 21, false), J$.T(2577, "JSXSpreadAttribute", 21, false))))
                    }, 11, false)
                }, 11, false)
            }, 11, false)));
            J$.X1(2801, J$.F(2793, (J$.X1(2673, J$.T(2649, 0, 22, false)), J$.G(2665, J$.R(2657, '_index2', _index2, 1), 'default', 0)), 0)(J$.T(2681, "JSXSpreadAttribute", 21, false), J$.T(2785, {
                visitor: J$.T(2697, [J$.T(2689, "argument", 21, false)], 10, false),
                aliases: J$.T(2713, [J$.T(2705, "JSX", 21, false)], 10, false),
                fields: J$.T(2777, {
                    argument: J$.T(2769, {
                        validate: J$.F(2761, (J$.X1(2745, J$.T(2721, 0, 22, false)), J$.G(2737, J$.R(2729, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(2753, "Expression", 21, false))
                    }, 11, false)
                }, 11, false)
            }, 11, false)));
            J$.X1(2969, J$.F(2961, (J$.X1(2833, J$.T(2809, 0, 22, false)), J$.G(2825, J$.R(2817, '_index2', _index2, 1), 'default', 0)), 0)(J$.T(2841, "JSXText", 21, false), J$.T(2953, {
                aliases: J$.T(2865, [
                    J$.T(2849, "JSX", 21, false),
                    J$.T(2857, "Immutable", 21, false)
                ], 10, false),
                builder: J$.T(2881, [J$.T(2873, "value", 21, false)], 10, false),
                fields: J$.T(2945, {
                    value: J$.T(2937, {
                        validate: J$.F(2929, (J$.X1(2913, J$.T(2889, 0, 22, false)), J$.G(2905, J$.R(2897, '_index', _index, 1), 'assertValueType', 0)), 0)(J$.T(2921, "string", 21, false))
                    }, 11, false)
                }, 11, false)
            }, 11, false)));
        } catch (J$e) {
            J$.Ex(3041, J$e);
        } finally {
            if (J$.Sr(3049)) {
                J$.L();
                continue jalangiLabel705;
            } else {
                J$.L();
                break jalangiLabel705;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
