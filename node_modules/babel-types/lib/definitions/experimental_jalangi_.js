J$.iids = {"8":[6,46,6,67],"9":[2,14,2,21],"16":[6,46,6,67],"17":[2,22,2,31],"25":[2,14,2,32],"33":[2,14,2,32],"41":[2,14,2,32],"49":[4,15,4,37],"57":[4,38,4,44],"65":[4,15,4,45],"73":[4,15,4,45],"81":[4,15,4,45],"89":[6,46,6,49],"97":[6,53,6,56],"105":[6,53,6,67],"113":[6,70,6,73],"121":[6,87,6,90],"129":[6,76,6,92],"137":[6,46,6,92],"145":[6,39,6,93],"153":[6,1,6,94],"161":[6,1,6,94],"169":[6,1,6,94],"177":[8,2,8,3],"185":[8,5,8,12],"193":[8,5,8,20],"201":[8,2,8,3],"209":[8,22,8,39],"217":[9,13,9,23],"225":[9,12,9,24],"233":[10,13,10,23],"241":[10,12,10,24],"249":[11,13,11,25],"257":[11,27,11,43],"265":[11,12,11,44],"273":[14,18,14,19],"281":[14,21,14,27],"289":[14,21,14,42],"297":[14,18,14,19],"305":[14,44,14,56],"313":[14,17,14,57],"321":[13,15,14,59],"329":[12,11,14,61],"337":[8,41,14,63],"345":[8,1,14,64],"353":[8,1,14,65],"361":[19,2,19,3],"369":[19,5,19,12],"377":[19,5,19,20],"385":[19,2,19,3],"393":[19,22,19,41],"401":[20,13,20,19],"409":[20,21,20,28],"417":[20,30,20,36],"425":[20,12,20,37],"433":[21,13,21,23],"441":[21,25,21,36],"449":[21,38,21,43],"457":[21,45,21,58],"465":[21,60,21,66],"473":[21,68,21,83],"481":[21,12,21,84],"489":[24,18,24,19],"497":[24,21,24,27],"505":[24,21,24,42],"513":[24,18,24,19],"521":[24,44,24,65],"529":[24,67,24,73],"537":[24,17,24,74],"545":[23,11,24,76],"553":[27,18,27,19],"561":[27,21,27,27],"569":[27,21,27,42],"577":[27,18,27,19],"585":[27,44,27,56],"593":[27,17,27,57],"601":[26,12,27,59],"609":[30,18,30,19],"617":[30,21,30,27],"625":[30,21,30,42],"633":[30,18,30,19],"641":[30,44,30,55],"649":[30,17,30,56],"657":[29,11,30,58],"665":[22,11,30,60],"673":[19,43,30,62],"681":[19,1,30,63],"689":[19,1,30,64],"697":[35,2,35,3],"705":[35,5,35,12],"713":[35,5,35,20],"721":[35,2,35,3],"729":[35,22,35,38],"737":[36,13,36,21],"745":[36,23,36,31],"753":[36,12,36,32],"761":[37,13,37,25],"769":[37,12,37,26],"777":[38,11,38,13],"785":[35,40,38,15],"793":[35,1,38,16],"801":[35,1,38,17],"809":[41,2,41,3],"817":[41,5,41,12],"825":[41,5,41,20],"833":[41,2,41,3],"841":[41,22,41,30],"849":[42,13,42,25],"857":[42,12,42,26],"865":[41,32,42,28],"873":[41,1,42,29],"881":[41,1,42,30],"889":[45,2,45,3],"897":[45,5,45,12],"905":[45,5,45,20],"913":[45,2,45,3],"921":[45,22,45,33],"929":[46,13,46,25],"937":[46,12,46,26],"945":[49,18,49,19],"953":[49,21,49,27],"961":[49,21,49,42],"969":[49,18,49,19],"977":[49,44,49,56],"985":[49,17,49,57],"993":[48,17,49,59],"1001":[47,11,49,61],"1009":[45,35,49,63],"1017":[45,1,49,64],"1025":[45,1,49,65],"1033":[54,2,54,3],"1041":[54,5,54,12],"1049":[54,5,54,20],"1057":[54,2,54,3],"1065":[54,22,54,36],"1073":[55,13,55,19],"1081":[55,12,55,20],"1089":[56,13,56,25],"1097":[56,12,56,26],"1105":[59,18,59,19],"1113":[59,21,59,27],"1121":[59,21,59,42],"1129":[59,18,59,19],"1137":[59,44,59,60],"1145":[59,17,59,61],"1153":[58,11,59,63],"1161":[57,11,59,65],"1169":[54,38,59,67],"1177":[54,1,59,68],"1185":[54,1,59,69],"1193":[64,2,64,3],"1201":[64,5,64,12],"1209":[64,5,64,20],"1217":[64,2,64,3],"1225":[64,22,64,46],"1233":[65,13,65,23],"1241":[65,12,65,24],"1249":[66,13,66,30],"1257":[66,12,66,31],"1265":[69,18,69,19],"1273":[69,21,69,27],"1281":[69,21,69,42],"1289":[69,18,69,19],"1297":[69,44,69,56],"1305":[69,17,69,57],"1313":[68,15,69,59],"1321":[67,11,69,61],"1329":[64,48,69,63],"1337":[64,1,69,64],"1345":[64,1,69,65],"1353":[74,2,74,3],"1361":[74,5,74,12],"1369":[74,5,74,20],"1377":[74,2,74,3],"1385":[74,22,74,48],"1393":[75,13,75,23],"1401":[75,12,75,24],"1409":[76,13,76,30],"1417":[76,12,76,31],"1425":[79,18,79,19],"1433":[79,21,79,27],"1441":[79,21,79,42],"1449":[79,18,79,19],"1457":[79,44,79,56],"1465":[79,17,79,57],"1473":[78,15,79,59],"1481":[77,11,79,61],"1489":[74,50,79,63],"1497":[74,1,79,64],"1505":[74,1,79,65],"1513":[84,2,84,3],"1521":[84,5,84,12],"1529":[84,5,84,20],"1537":[84,2,84,3],"1545":[84,22,84,36],"1553":[85,13,85,23],"1561":[85,12,85,24],"1569":[86,13,86,24],"1577":[86,12,86,25],"1585":[89,18,89,19],"1593":[89,21,89,27],"1601":[89,21,89,42],"1609":[89,18,89,19],"1617":[89,44,89,50],"1625":[89,17,89,51],"1633":[88,15,89,53],"1641":[87,11,89,55],"1649":[84,38,89,57],"1657":[84,1,89,58],"1665":[84,1,89,59],"1673":[94,2,94,3],"1681":[94,5,94,12],"1689":[94,5,94,20],"1697":[94,2,94,3],"1705":[94,22,94,38],"1713":[95,13,95,23],"1721":[95,12,95,24],"1729":[96,13,96,24],"1737":[96,12,96,25],"1745":[99,18,99,19],"1753":[99,21,99,27],"1761":[99,21,99,42],"1769":[99,18,99,19],"1777":[99,44,99,56],"1785":[99,17,99,57],"1793":[98,15,99,59],"1801":[97,11,99,61],"1809":[94,40,99,63],"1817":[94,1,99,64],"1825":[94,1,99,65],"1833":[1,1,99,65],"1841":[1,1,99,65],"1849":[1,1,99,65],"1857":[6,1,6,94],"1865":[1,1,99,65],"1873":[6,46,6,92],"1881":[6,1,6,94],"1889":[6,1,6,94],"1897":[1,1,99,65],"1905":[1,1,99,65],"nBranches":4,"originalCodeFileName":"/home/james/nodejs/HiPar/node_modules/babel-types/lib/definitions/experimental.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/node_modules/babel-types/lib/definitions/experimental_jalangi_.js","code":"\"use strict\";\n\nvar _index = require(\"./index\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index2.default)(\"AwaitExpression\", {\n  builder: [\"argument\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    argument: {\n      validate: (0, _index.assertNodeType)(\"Expression\")\n    }\n  }\n});\n\n(0, _index2.default)(\"ForAwaitStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\", \"ForXStatement\"],\n  fields: {\n    left: {\n      validate: (0, _index.assertNodeType)(\"VariableDeclaration\", \"LVal\")\n    },\n    right: {\n      validate: (0, _index.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _index.assertNodeType)(\"Statement\")\n    }\n  }\n});\n\n(0, _index2.default)(\"BindExpression\", {\n  visitor: [\"object\", \"callee\"],\n  aliases: [\"Expression\"],\n  fields: {}\n});\n\n(0, _index2.default)(\"Import\", {\n  aliases: [\"Expression\"]\n});\n\n(0, _index2.default)(\"Decorator\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: (0, _index.assertNodeType)(\"Expression\")\n    }\n  }\n});\n\n(0, _index2.default)(\"DoExpression\", {\n  visitor: [\"body\"],\n  aliases: [\"Expression\"],\n  fields: {\n    body: {\n      validate: (0, _index.assertNodeType)(\"BlockStatement\")\n    }\n  }\n});\n\n(0, _index2.default)(\"ExportDefaultSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: (0, _index.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n\n(0, _index2.default)(\"ExportNamespaceSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: (0, _index.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n\n(0, _index2.default)(\"RestProperty\", {\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\"],\n  fields: {\n    argument: {\n      validate: (0, _index.assertNodeType)(\"LVal\")\n    }\n  }\n});\n\n(0, _index2.default)(\"SpreadProperty\", {\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\"],\n  fields: {\n    argument: {\n      validate: (0, _index.assertNodeType)(\"Expression\")\n    }\n  }\n});"};
jalangiLabel709:
    while (true) {
        try {
            J$.Se(1833, '/home/james/nodejs/HiPar/node_modules/babel-types/lib/definitions/experimental_jalangi_.js', '/home/james/nodejs/HiPar/node_modules/babel-types/lib/definitions/experimental.js');
            function _interopRequireDefault(obj) {
                jalangiLabel708:
                    while (true) {
                        try {
                            J$.Fe(153, arguments.callee, this, arguments);
                            arguments = J$.N(161, 'arguments', arguments, 4);
                            obj = J$.N(169, 'obj', obj, 4);
                            return J$.X1(145, J$.Rt(137, J$.X1(1873, J$.C(16, J$.C(8, J$.R(89, 'obj', obj, 0)) ? J$.G(105, J$.R(97, 'obj', obj, 0), '__esModule', 0) : J$._())) ? J$.R(113, 'obj', obj, 0) : J$.T(129, {
                                default: J$.R(121, 'obj', obj, 0)
                            }, 11, false)));
                        } catch (J$e) {
                            J$.Ex(1881, J$e);
                        } finally {
                            if (J$.Fr(1889))
                                continue jalangiLabel708;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(1841, '_index', _index, 0);
            J$.N(1849, '_index2', _index2, 0);
            _interopRequireDefault = J$.N(1865, '_interopRequireDefault', J$.T(1857, _interopRequireDefault, 12, false, 153), 0);
            var _index = J$.X1(41, J$.W(33, '_index', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, "./index", 21, false)), _index, 3));
            var _index2 = J$.X1(81, J$.W(73, '_index2', J$.F(65, J$.R(49, '_interopRequireDefault', _interopRequireDefault, 1), 0)(J$.R(57, '_index', _index, 1)), _index2, 3));
            J$.X1(353, J$.F(345, (J$.X1(201, J$.T(177, 0, 22, false)), J$.G(193, J$.R(185, '_index2', _index2, 1), 'default', 0)), 0)(J$.T(209, "AwaitExpression", 21, false), J$.T(337, {
                builder: J$.T(225, [J$.T(217, "argument", 21, false)], 10, false),
                visitor: J$.T(241, [J$.T(233, "argument", 21, false)], 10, false),
                aliases: J$.T(265, [
                    J$.T(249, "Expression", 21, false),
                    J$.T(257, "Terminatorless", 21, false)
                ], 10, false),
                fields: J$.T(329, {
                    argument: J$.T(321, {
                        validate: J$.F(313, (J$.X1(297, J$.T(273, 0, 22, false)), J$.G(289, J$.R(281, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(305, "Expression", 21, false))
                    }, 11, false)
                }, 11, false)
            }, 11, false)));
            J$.X1(689, J$.F(681, (J$.X1(385, J$.T(361, 0, 22, false)), J$.G(377, J$.R(369, '_index2', _index2, 1), 'default', 0)), 0)(J$.T(393, "ForAwaitStatement", 21, false), J$.T(673, {
                visitor: J$.T(425, [
                    J$.T(401, "left", 21, false),
                    J$.T(409, "right", 21, false),
                    J$.T(417, "body", 21, false)
                ], 10, false),
                aliases: J$.T(481, [
                    J$.T(433, "Scopable", 21, false),
                    J$.T(441, "Statement", 21, false),
                    J$.T(449, "For", 21, false),
                    J$.T(457, "BlockParent", 21, false),
                    J$.T(465, "Loop", 21, false),
                    J$.T(473, "ForXStatement", 21, false)
                ], 10, false),
                fields: J$.T(665, {
                    left: J$.T(545, {
                        validate: J$.F(537, (J$.X1(513, J$.T(489, 0, 22, false)), J$.G(505, J$.R(497, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(521, "VariableDeclaration", 21, false), J$.T(529, "LVal", 21, false))
                    }, 11, false),
                    right: J$.T(601, {
                        validate: J$.F(593, (J$.X1(577, J$.T(553, 0, 22, false)), J$.G(569, J$.R(561, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(585, "Expression", 21, false))
                    }, 11, false),
                    body: J$.T(657, {
                        validate: J$.F(649, (J$.X1(633, J$.T(609, 0, 22, false)), J$.G(625, J$.R(617, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(641, "Statement", 21, false))
                    }, 11, false)
                }, 11, false)
            }, 11, false)));
            J$.X1(801, J$.F(793, (J$.X1(721, J$.T(697, 0, 22, false)), J$.G(713, J$.R(705, '_index2', _index2, 1), 'default', 0)), 0)(J$.T(729, "BindExpression", 21, false), J$.T(785, {
                visitor: J$.T(753, [
                    J$.T(737, "object", 21, false),
                    J$.T(745, "callee", 21, false)
                ], 10, false),
                aliases: J$.T(769, [J$.T(761, "Expression", 21, false)], 10, false),
                fields: J$.T(777, {}, 11, false)
            }, 11, false)));
            J$.X1(881, J$.F(873, (J$.X1(833, J$.T(809, 0, 22, false)), J$.G(825, J$.R(817, '_index2', _index2, 1), 'default', 0)), 0)(J$.T(841, "Import", 21, false), J$.T(865, {
                aliases: J$.T(857, [J$.T(849, "Expression", 21, false)], 10, false)
            }, 11, false)));
            J$.X1(1025, J$.F(1017, (J$.X1(913, J$.T(889, 0, 22, false)), J$.G(905, J$.R(897, '_index2', _index2, 1), 'default', 0)), 0)(J$.T(921, "Decorator", 21, false), J$.T(1009, {
                visitor: J$.T(937, [J$.T(929, "expression", 21, false)], 10, false),
                fields: J$.T(1001, {
                    expression: J$.T(993, {
                        validate: J$.F(985, (J$.X1(969, J$.T(945, 0, 22, false)), J$.G(961, J$.R(953, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(977, "Expression", 21, false))
                    }, 11, false)
                }, 11, false)
            }, 11, false)));
            J$.X1(1185, J$.F(1177, (J$.X1(1057, J$.T(1033, 0, 22, false)), J$.G(1049, J$.R(1041, '_index2', _index2, 1), 'default', 0)), 0)(J$.T(1065, "DoExpression", 21, false), J$.T(1169, {
                visitor: J$.T(1081, [J$.T(1073, "body", 21, false)], 10, false),
                aliases: J$.T(1097, [J$.T(1089, "Expression", 21, false)], 10, false),
                fields: J$.T(1161, {
                    body: J$.T(1153, {
                        validate: J$.F(1145, (J$.X1(1129, J$.T(1105, 0, 22, false)), J$.G(1121, J$.R(1113, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(1137, "BlockStatement", 21, false))
                    }, 11, false)
                }, 11, false)
            }, 11, false)));
            J$.X1(1345, J$.F(1337, (J$.X1(1217, J$.T(1193, 0, 22, false)), J$.G(1209, J$.R(1201, '_index2', _index2, 1), 'default', 0)), 0)(J$.T(1225, "ExportDefaultSpecifier", 21, false), J$.T(1329, {
                visitor: J$.T(1241, [J$.T(1233, "exported", 21, false)], 10, false),
                aliases: J$.T(1257, [J$.T(1249, "ModuleSpecifier", 21, false)], 10, false),
                fields: J$.T(1321, {
                    exported: J$.T(1313, {
                        validate: J$.F(1305, (J$.X1(1289, J$.T(1265, 0, 22, false)), J$.G(1281, J$.R(1273, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(1297, "Identifier", 21, false))
                    }, 11, false)
                }, 11, false)
            }, 11, false)));
            J$.X1(1505, J$.F(1497, (J$.X1(1377, J$.T(1353, 0, 22, false)), J$.G(1369, J$.R(1361, '_index2', _index2, 1), 'default', 0)), 0)(J$.T(1385, "ExportNamespaceSpecifier", 21, false), J$.T(1489, {
                visitor: J$.T(1401, [J$.T(1393, "exported", 21, false)], 10, false),
                aliases: J$.T(1417, [J$.T(1409, "ModuleSpecifier", 21, false)], 10, false),
                fields: J$.T(1481, {
                    exported: J$.T(1473, {
                        validate: J$.F(1465, (J$.X1(1449, J$.T(1425, 0, 22, false)), J$.G(1441, J$.R(1433, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(1457, "Identifier", 21, false))
                    }, 11, false)
                }, 11, false)
            }, 11, false)));
            J$.X1(1665, J$.F(1657, (J$.X1(1537, J$.T(1513, 0, 22, false)), J$.G(1529, J$.R(1521, '_index2', _index2, 1), 'default', 0)), 0)(J$.T(1545, "RestProperty", 21, false), J$.T(1649, {
                visitor: J$.T(1561, [J$.T(1553, "argument", 21, false)], 10, false),
                aliases: J$.T(1577, [J$.T(1569, "UnaryLike", 21, false)], 10, false),
                fields: J$.T(1641, {
                    argument: J$.T(1633, {
                        validate: J$.F(1625, (J$.X1(1609, J$.T(1585, 0, 22, false)), J$.G(1601, J$.R(1593, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(1617, "LVal", 21, false))
                    }, 11, false)
                }, 11, false)
            }, 11, false)));
            J$.X1(1825, J$.F(1817, (J$.X1(1697, J$.T(1673, 0, 22, false)), J$.G(1689, J$.R(1681, '_index2', _index2, 1), 'default', 0)), 0)(J$.T(1705, "SpreadProperty", 21, false), J$.T(1809, {
                visitor: J$.T(1721, [J$.T(1713, "argument", 21, false)], 10, false),
                aliases: J$.T(1737, [J$.T(1729, "UnaryLike", 21, false)], 10, false),
                fields: J$.T(1801, {
                    argument: J$.T(1793, {
                        validate: J$.F(1785, (J$.X1(1769, J$.T(1745, 0, 22, false)), J$.G(1761, J$.R(1753, '_index', _index, 1), 'assertNodeType', 0)), 0)(J$.T(1777, "Expression", 21, false))
                    }, 11, false)
                }, 11, false)
            }, 11, false)));
        } catch (J$e) {
            J$.Ex(1897, J$e);
        } finally {
            if (J$.Sr(1905)) {
                J$.L();
                continue jalangiLabel709;
            } else {
                J$.L();
                break jalangiLabel709;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
