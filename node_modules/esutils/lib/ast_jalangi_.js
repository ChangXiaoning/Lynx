J$.iids = {"8":[29,13,29,25],"9":[26,5,26,17],"10":[29,13,29,25],"16":[30,17,30,26],"17":[26,5,26,18],"18":[53,13,53,25],"24":[31,18,31,35],"25":[29,13,29,17],"26":[65,13,65,25],"32":[32,18,32,40],"33":[29,21,29,25],"34":[91,37,91,49],"40":[33,18,33,36],"41":[29,35,29,40],"42":[91,53,91,88],"48":[34,18,34,34],"49":[29,35,29,40],"50":[97,21,97,43],"56":[35,18,35,41],"57":[29,28,29,41],"58":[115,13,115,40],"64":[36,18,36,38],"65":[30,17,30,21],"66":[118,13,118,35],"72":[37,18,37,30],"73":[30,17,30,26],"74":[123,17,123,47],"80":[38,18,38,27],"81":[31,18,31,35],"82":[124,21,124,46],"88":[39,18,39,37],"89":[32,18,32,40],"96":[40,18,40,36],"97":[33,18,33,36],"104":[41,18,41,33],"105":[34,18,34,34],"112":[42,18,42,36],"113":[35,18,35,41],"120":[43,18,43,38],"121":[36,18,36,38],"128":[44,18,44,34],"129":[37,18,37,30],"136":[45,18,45,35],"137":[38,18,38,27],"144":[46,18,46,36],"145":[39,18,39,37],"152":[53,13,53,25],"153":[40,18,40,36],"160":[54,17,54,26],"161":[41,18,41,33],"168":[55,18,55,36],"169":[42,18,42,36],"176":[56,18,56,34],"177":[43,18,43,38],"184":[57,18,57,32],"185":[44,18,44,34],"192":[58,18,58,34],"193":[45,18,45,35],"200":[65,13,65,25],"201":[47,24,47,28],"208":[66,17,66,26],"209":[47,24,47,28],"216":[67,18,67,34],"217":[47,17,47,29],"224":[68,18,68,34],"225":[46,18,46,36],"232":[69,18,69,37],"233":[49,16,49,21],"240":[70,18,70,37],"241":[49,16,49,21],"248":[71,18,71,36],"249":[49,9,49,22],"256":[72,18,72,34],"257":[28,5,50,6],"264":[73,18,73,39],"265":[28,5,50,6],"272":[74,18,74,34],"273":[28,5,50,6],"280":[75,18,75,32],"281":[53,13,53,17],"288":[76,18,76,31],"289":[53,21,53,25],"296":[77,18,77,36],"297":[53,35,53,40],"304":[78,18,78,35],"305":[53,35,53,40],"312":[79,18,79,35],"313":[53,28,53,41],"320":[80,18,80,34],"321":[54,17,54,21],"328":[81,18,81,32],"329":[54,17,54,26],"336":[82,18,82,39],"337":[55,18,55,36],"344":[83,18,83,34],"345":[56,18,56,34],"352":[84,18,84,33],"353":[57,18,57,32],"360":[91,37,91,88],"361":[59,24,59,28],"368":[91,16,91,88],"369":[59,24,59,28],"376":[97,21,97,43],"377":[59,17,59,29],"384":[95,17,95,26],"385":[58,18,58,34],"392":[96,18,96,31],"393":[61,16,61,21],"400":[102,18,102,36],"401":[61,16,61,21],"408":[103,18,103,32],"409":[61,9,61,22],"416":[104,18,104,34],"417":[52,5,62,6],"424":[105,18,105,34],"425":[52,5,62,6],"432":[106,18,106,33],"433":[52,5,62,6],"440":[115,13,115,40],"441":[65,13,65,17],"448":[118,13,118,35],"449":[65,21,65,25],"456":[124,21,124,46],"457":[65,35,65,40],"464":[123,17,123,47],"465":[65,35,65,40],"472":[129,18,129,25],"473":[65,28,65,41],"481":[66,17,66,21],"489":[66,17,66,26],"497":[67,18,67,34],"505":[68,18,68,34],"513":[69,18,69,37],"521":[70,18,70,37],"529":[71,18,71,36],"537":[72,18,72,34],"545":[73,18,73,39],"553":[74,18,74,34],"561":[75,18,75,32],"569":[76,18,76,31],"577":[77,18,77,36],"585":[78,18,78,35],"593":[79,18,79,35],"601":[80,18,80,34],"609":[81,18,81,32],"617":[82,18,82,39],"625":[83,18,83,34],"633":[85,24,85,28],"641":[85,24,85,28],"649":[85,17,85,29],"657":[84,18,84,33],"665":[87,16,87,21],"673":[87,16,87,21],"681":[87,9,87,22],"689":[64,5,88,6],"697":[64,5,88,6],"705":[64,5,88,6],"713":[91,16,91,27],"721":[91,28,91,32],"729":[91,16,91,33],"737":[91,37,91,41],"745":[91,45,91,49],"753":[91,53,91,57],"761":[91,53,91,62],"769":[91,67,91,88],"777":[91,16,91,88],"785":[91,9,91,89],"793":[90,5,92,6],"801":[90,5,92,6],"809":[90,5,92,6],"817":[95,17,95,21],"825":[95,17,95,26],"833":[97,21,97,25],"841":[97,21,97,35],"849":[97,39,97,43],"857":[98,28,98,32],"865":[98,28,98,42],"873":[98,28,98,42],"881":[98,21,98,43],"889":[100,24,100,28],"897":[100,24,100,39],"905":[100,24,100,39],"913":[100,17,100,40],"921":[96,18,96,31],"929":[102,18,102,36],"937":[103,18,103,32],"945":[104,18,104,34],"953":[105,18,105,34],"961":[107,24,107,28],"969":[107,24,107,33],"977":[107,24,107,33],"985":[107,17,107,34],"993":[106,18,106,33],"1001":[109,16,109,20],"1009":[109,16,109,20],"1017":[109,9,109,21],"1025":[94,5,110,6],"1033":[94,5,110,6],"1041":[94,5,110,6],"1049":[115,13,115,17],"1057":[115,13,115,22],"1065":[115,27,115,40],"1073":[116,20,116,25],"1081":[116,20,116,25],"1089":[116,13,116,26],"1097":[118,13,118,17],"1105":[118,13,118,27],"1113":[118,31,118,35],"1121":[119,20,119,25],"1129":[119,20,119,25],"1137":[119,13,119,26],"1145":[121,19,121,23],"1153":[121,19,121,34],"1161":[121,19,121,34],"1169":[121,9,121,35],"1177":[123,17,123,24],"1185":[123,17,123,29],"1193":[123,34,123,47],"1201":[124,21,124,28],"1209":[124,21,124,38],"1217":[124,42,124,46],"1225":[125,28,125,32],"1233":[125,28,125,32],"1241":[125,21,125,33],"1249":[128,23,128,40],"1257":[128,41,128,48],"1265":[128,23,128,49],"1273":[128,23,128,49],"1281":[128,13,128,50],"1289":[129,18,129,25],"1297":[131,16,131,21],"1305":[131,16,131,21],"1313":[131,9,131,22],"1321":[112,5,132,6],"1329":[112,5,132,6],"1337":[112,5,132,6],"1345":[112,5,132,6],"1353":[134,5,134,11],"1361":[135,23,135,35],"1369":[136,22,136,33],"1377":[137,31,137,51],"1385":[138,26,138,41],"1393":[139,35,139,59],"1401":[141,28,141,45],"1409":[134,22,141,47],"1417":[134,5,141,47],"1425":[134,5,141,48],"1433":[25,2,143,2],"1441":[25,2,143,2],"1449":[28,5,50,6],"1457":[25,2,143,2],"1465":[52,5,62,6],"1473":[25,2,143,2],"1481":[64,5,88,6],"1489":[25,2,143,2],"1497":[90,5,92,6],"1505":[25,2,143,2],"1513":[94,5,110,6],"1521":[25,2,143,2],"1529":[112,5,132,6],"1537":[25,2,143,2],"1545":[25,2,143,2],"1553":[25,1,143,5],"1561":[25,1,143,6],"1569":[1,1,144,36],"1577":[29,9,29,42],"1585":[30,17,30,26],"1593":[31,18,31,35],"1601":[32,18,32,40],"1609":[33,18,33,36],"1617":[34,18,34,34],"1625":[35,18,35,41],"1633":[36,18,36,38],"1641":[37,18,37,30],"1649":[38,18,38,27],"1657":[39,18,39,37],"1665":[40,18,40,36],"1673":[41,18,41,33],"1681":[42,18,42,36],"1689":[43,18,43,38],"1697":[44,18,44,34],"1705":[45,18,45,35],"1713":[46,18,46,36],"1721":[28,5,50,6],"1729":[28,5,50,6],"1737":[53,9,53,42],"1745":[54,17,54,26],"1753":[55,18,55,36],"1761":[56,18,56,34],"1769":[57,18,57,32],"1777":[58,18,58,34],"1785":[52,5,62,6],"1793":[52,5,62,6],"1801":[65,9,65,42],"1809":[66,17,66,26],"1817":[67,18,67,34],"1825":[68,18,68,34],"1833":[69,18,69,37],"1841":[70,18,70,37],"1849":[71,18,71,36],"1857":[72,18,72,34],"1865":[73,18,73,39],"1873":[74,18,74,34],"1881":[75,18,75,32],"1889":[76,18,76,31],"1897":[77,18,77,36],"1905":[78,18,78,35],"1913":[79,18,79,35],"1921":[80,18,80,34],"1929":[81,18,81,32],"1937":[82,18,82,39],"1945":[83,18,83,34],"1953":[84,18,84,33],"1961":[64,5,88,6],"1969":[64,5,88,6],"1977":[90,5,92,6],"1985":[90,5,92,6],"1993":[97,17,99,18],"2001":[95,17,95,26],"2009":[96,18,96,31],"2017":[102,18,102,36],"2025":[103,18,103,32],"2033":[104,18,104,34],"2041":[105,18,105,34],"2049":[106,18,106,33],"2057":[94,5,110,6],"2065":[94,5,110,6],"2073":[115,9,117,10],"2081":[118,9,120,10],"2089":[124,17,126,18],"2097":[123,13,127,14],"2105":[122,9,129,27],"2113":[112,5,132,6],"2121":[112,5,132,6],"2129":[25,2,143,2],"2137":[25,2,143,2],"2145":[1,1,144,36],"2153":[1,1,144,36],"nBranches":118,"originalCodeFileName":"/home/james/nodejs/HiPar/node_modules/esutils/lib/ast.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/node_modules/esutils/lib/ast_jalangi_.js","code":"/*\n  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n(function () {\n    'use strict';\n\n    function isExpression(node) {\n        if (node == null) { return false; }\n        switch (node.type) {\n            case 'ArrayExpression':\n            case 'AssignmentExpression':\n            case 'BinaryExpression':\n            case 'CallExpression':\n            case 'ConditionalExpression':\n            case 'FunctionExpression':\n            case 'Identifier':\n            case 'Literal':\n            case 'LogicalExpression':\n            case 'MemberExpression':\n            case 'NewExpression':\n            case 'ObjectExpression':\n            case 'SequenceExpression':\n            case 'ThisExpression':\n            case 'UnaryExpression':\n            case 'UpdateExpression':\n                return true;\n        }\n        return false;\n    }\n\n    function isIterationStatement(node) {\n        if (node == null) { return false; }\n        switch (node.type) {\n            case 'DoWhileStatement':\n            case 'ForInStatement':\n            case 'ForStatement':\n            case 'WhileStatement':\n                return true;\n        }\n        return false;\n    }\n\n    function isStatement(node) {\n        if (node == null) { return false; }\n        switch (node.type) {\n            case 'BlockStatement':\n            case 'BreakStatement':\n            case 'ContinueStatement':\n            case 'DebuggerStatement':\n            case 'DoWhileStatement':\n            case 'EmptyStatement':\n            case 'ExpressionStatement':\n            case 'ForInStatement':\n            case 'ForStatement':\n            case 'IfStatement':\n            case 'LabeledStatement':\n            case 'ReturnStatement':\n            case 'SwitchStatement':\n            case 'ThrowStatement':\n            case 'TryStatement':\n            case 'VariableDeclaration':\n            case 'WhileStatement':\n            case 'WithStatement':\n                return true;\n        }\n        return false;\n    }\n\n    function isSourceElement(node) {\n      return isStatement(node) || node != null && node.type === 'FunctionDeclaration';\n    }\n\n    function trailingStatement(node) {\n        switch (node.type) {\n        case 'IfStatement':\n            if (node.alternate != null) {\n                return node.alternate;\n            }\n            return node.consequent;\n\n        case 'LabeledStatement':\n        case 'ForStatement':\n        case 'ForInStatement':\n        case 'WhileStatement':\n        case 'WithStatement':\n            return node.body;\n        }\n        return null;\n    }\n\n    function isProblematicIfStatement(node) {\n        var current;\n\n        if (node.type !== 'IfStatement') {\n            return false;\n        }\n        if (node.alternate == null) {\n            return false;\n        }\n        current = node.consequent;\n        do {\n            if (current.type === 'IfStatement') {\n                if (current.alternate == null)  {\n                    return true;\n                }\n            }\n            current = trailingStatement(current);\n        } while (current);\n\n        return false;\n    }\n\n    module.exports = {\n        isExpression: isExpression,\n        isStatement: isStatement,\n        isIterationStatement: isIterationStatement,\n        isSourceElement: isSourceElement,\n        isProblematicIfStatement: isProblematicIfStatement,\n\n        trailingStatement: trailingStatement\n    };\n}());\n/* vim: set sw=4 ts=4 et tw=80 : */\n"};
jalangiLabel169:
    while (true) {
        try {
            J$.Se(1569, '/home/james/nodejs/HiPar/node_modules/esutils/lib/ast_jalangi_.js', '/home/james/nodejs/HiPar/node_modules/esutils/lib/ast.js');
            J$.X1(1561, J$.F(1553, J$.T(1545, function () {
                jalangiLabel168:
                    while (true) {
                        try {
                            J$.Fe(1433, arguments.callee, this, arguments);
                            function isExpression(node) {
                                jalangiLabel162:
                                    while (true) {
                                        try {
                                            J$.Fe(257, arguments.callee, this, arguments);
                                            arguments = J$.N(265, 'arguments', arguments, 4);
                                            node = J$.N(273, 'node', node, 4);
                                            if (J$.X1(1577, J$.C(8, J$.B(10, '==', J$.R(25, 'node', node, 0), J$.T(33, null, 25, false), 0)))) {
                                                return J$.X1(57, J$.Rt(49, J$.T(41, false, 23, false)));
                                            }
                                            switch (J$.X1(1585, J$.C1(16, J$.G(73, J$.R(65, 'node', node, 0), 'type', 0)))) {
                                            case J$.X1(1593, J$.C2(24, J$.T(81, 'ArrayExpression', 21, false))):
                                            case J$.X1(1601, J$.C2(32, J$.T(89, 'AssignmentExpression', 21, false))):
                                            case J$.X1(1609, J$.C2(40, J$.T(97, 'BinaryExpression', 21, false))):
                                            case J$.X1(1617, J$.C2(48, J$.T(105, 'CallExpression', 21, false))):
                                            case J$.X1(1625, J$.C2(56, J$.T(113, 'ConditionalExpression', 21, false))):
                                            case J$.X1(1633, J$.C2(64, J$.T(121, 'FunctionExpression', 21, false))):
                                            case J$.X1(1641, J$.C2(72, J$.T(129, 'Identifier', 21, false))):
                                            case J$.X1(1649, J$.C2(80, J$.T(137, 'Literal', 21, false))):
                                            case J$.X1(1657, J$.C2(88, J$.T(145, 'LogicalExpression', 21, false))):
                                            case J$.X1(1665, J$.C2(96, J$.T(153, 'MemberExpression', 21, false))):
                                            case J$.X1(1673, J$.C2(104, J$.T(161, 'NewExpression', 21, false))):
                                            case J$.X1(1681, J$.C2(112, J$.T(169, 'ObjectExpression', 21, false))):
                                            case J$.X1(1689, J$.C2(120, J$.T(177, 'SequenceExpression', 21, false))):
                                            case J$.X1(1697, J$.C2(128, J$.T(185, 'ThisExpression', 21, false))):
                                            case J$.X1(1705, J$.C2(136, J$.T(193, 'UnaryExpression', 21, false))):
                                            case J$.X1(1713, J$.C2(144, J$.T(225, 'UpdateExpression', 21, false))):
                                                return J$.X1(217, J$.Rt(209, J$.T(201, true, 23, false)));
                                            }
                                            return J$.X1(249, J$.Rt(241, J$.T(233, false, 23, false)));
                                        } catch (J$e) {
                                            J$.Ex(1721, J$e);
                                        } finally {
                                            if (J$.Fr(1729))
                                                continue jalangiLabel162;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            function isIterationStatement(node) {
                                jalangiLabel163:
                                    while (true) {
                                        try {
                                            J$.Fe(417, arguments.callee, this, arguments);
                                            arguments = J$.N(425, 'arguments', arguments, 4);
                                            node = J$.N(433, 'node', node, 4);
                                            if (J$.X1(1737, J$.C(152, J$.B(18, '==', J$.R(281, 'node', node, 0), J$.T(289, null, 25, false), 0)))) {
                                                return J$.X1(313, J$.Rt(305, J$.T(297, false, 23, false)));
                                            }
                                            switch (J$.X1(1745, J$.C1(160, J$.G(329, J$.R(321, 'node', node, 0), 'type', 0)))) {
                                            case J$.X1(1753, J$.C2(168, J$.T(337, 'DoWhileStatement', 21, false))):
                                            case J$.X1(1761, J$.C2(176, J$.T(345, 'ForInStatement', 21, false))):
                                            case J$.X1(1769, J$.C2(184, J$.T(353, 'ForStatement', 21, false))):
                                            case J$.X1(1777, J$.C2(192, J$.T(385, 'WhileStatement', 21, false))):
                                                return J$.X1(377, J$.Rt(369, J$.T(361, true, 23, false)));
                                            }
                                            return J$.X1(409, J$.Rt(401, J$.T(393, false, 23, false)));
                                        } catch (J$e) {
                                            J$.Ex(1785, J$e);
                                        } finally {
                                            if (J$.Fr(1793))
                                                continue jalangiLabel163;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            function isStatement(node) {
                                jalangiLabel164:
                                    while (true) {
                                        try {
                                            J$.Fe(689, arguments.callee, this, arguments);
                                            arguments = J$.N(697, 'arguments', arguments, 4);
                                            node = J$.N(705, 'node', node, 4);
                                            if (J$.X1(1801, J$.C(200, J$.B(26, '==', J$.R(441, 'node', node, 0), J$.T(449, null, 25, false), 0)))) {
                                                return J$.X1(473, J$.Rt(465, J$.T(457, false, 23, false)));
                                            }
                                            switch (J$.X1(1809, J$.C1(208, J$.G(489, J$.R(481, 'node', node, 0), 'type', 0)))) {
                                            case J$.X1(1817, J$.C2(216, J$.T(497, 'BlockStatement', 21, false))):
                                            case J$.X1(1825, J$.C2(224, J$.T(505, 'BreakStatement', 21, false))):
                                            case J$.X1(1833, J$.C2(232, J$.T(513, 'ContinueStatement', 21, false))):
                                            case J$.X1(1841, J$.C2(240, J$.T(521, 'DebuggerStatement', 21, false))):
                                            case J$.X1(1849, J$.C2(248, J$.T(529, 'DoWhileStatement', 21, false))):
                                            case J$.X1(1857, J$.C2(256, J$.T(537, 'EmptyStatement', 21, false))):
                                            case J$.X1(1865, J$.C2(264, J$.T(545, 'ExpressionStatement', 21, false))):
                                            case J$.X1(1873, J$.C2(272, J$.T(553, 'ForInStatement', 21, false))):
                                            case J$.X1(1881, J$.C2(280, J$.T(561, 'ForStatement', 21, false))):
                                            case J$.X1(1889, J$.C2(288, J$.T(569, 'IfStatement', 21, false))):
                                            case J$.X1(1897, J$.C2(296, J$.T(577, 'LabeledStatement', 21, false))):
                                            case J$.X1(1905, J$.C2(304, J$.T(585, 'ReturnStatement', 21, false))):
                                            case J$.X1(1913, J$.C2(312, J$.T(593, 'SwitchStatement', 21, false))):
                                            case J$.X1(1921, J$.C2(320, J$.T(601, 'ThrowStatement', 21, false))):
                                            case J$.X1(1929, J$.C2(328, J$.T(609, 'TryStatement', 21, false))):
                                            case J$.X1(1937, J$.C2(336, J$.T(617, 'VariableDeclaration', 21, false))):
                                            case J$.X1(1945, J$.C2(344, J$.T(625, 'WhileStatement', 21, false))):
                                            case J$.X1(1953, J$.C2(352, J$.T(657, 'WithStatement', 21, false))):
                                                return J$.X1(649, J$.Rt(641, J$.T(633, true, 23, false)));
                                            }
                                            return J$.X1(681, J$.Rt(673, J$.T(665, false, 23, false)));
                                        } catch (J$e) {
                                            J$.Ex(1961, J$e);
                                        } finally {
                                            if (J$.Fr(1969))
                                                continue jalangiLabel164;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            function isSourceElement(node) {
                                jalangiLabel165:
                                    while (true) {
                                        try {
                                            J$.Fe(793, arguments.callee, this, arguments);
                                            arguments = J$.N(801, 'arguments', arguments, 4);
                                            node = J$.N(809, 'node', node, 4);
                                            return J$.X1(785, J$.Rt(777, J$.C(368, J$.F(729, J$.R(713, 'isStatement', isStatement, 0), 0)(J$.R(721, 'node', node, 0))) ? J$._() : J$.C(360, J$.B(34, '!=', J$.R(737, 'node', node, 0), J$.T(745, null, 25, false), 0)) ? J$.B(42, '===', J$.G(761, J$.R(753, 'node', node, 0), 'type', 0), J$.T(769, 'FunctionDeclaration', 21, false), 0) : J$._()));
                                        } catch (J$e) {
                                            J$.Ex(1977, J$e);
                                        } finally {
                                            if (J$.Fr(1985))
                                                continue jalangiLabel165;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            function trailingStatement(node) {
                                jalangiLabel166:
                                    while (true) {
                                        try {
                                            J$.Fe(1025, arguments.callee, this, arguments);
                                            arguments = J$.N(1033, 'arguments', arguments, 4);
                                            node = J$.N(1041, 'node', node, 4);
                                            switch (J$.X1(2001, J$.C1(384, J$.G(825, J$.R(817, 'node', node, 0), 'type', 0)))) {
                                            case J$.X1(2009, J$.C2(392, J$.T(921, 'IfStatement', 21, false))):
                                                if (J$.X1(1993, J$.C(376, J$.B(50, '!=', J$.G(841, J$.R(833, 'node', node, 0), 'alternate', 0), J$.T(849, null, 25, false), 0)))) {
                                                    return J$.X1(881, J$.Rt(873, J$.G(865, J$.R(857, 'node', node, 0), 'alternate', 0)));
                                                }
                                                return J$.X1(913, J$.Rt(905, J$.G(897, J$.R(889, 'node', node, 0), 'consequent', 0)));
                                            case J$.X1(2017, J$.C2(400, J$.T(929, 'LabeledStatement', 21, false))):
                                            case J$.X1(2025, J$.C2(408, J$.T(937, 'ForStatement', 21, false))):
                                            case J$.X1(2033, J$.C2(416, J$.T(945, 'ForInStatement', 21, false))):
                                            case J$.X1(2041, J$.C2(424, J$.T(953, 'WhileStatement', 21, false))):
                                            case J$.X1(2049, J$.C2(432, J$.T(993, 'WithStatement', 21, false))):
                                                return J$.X1(985, J$.Rt(977, J$.G(969, J$.R(961, 'node', node, 0), 'body', 0)));
                                            }
                                            return J$.X1(1017, J$.Rt(1009, J$.T(1001, null, 25, false)));
                                        } catch (J$e) {
                                            J$.Ex(2057, J$e);
                                        } finally {
                                            if (J$.Fr(2065))
                                                continue jalangiLabel166;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            function isProblematicIfStatement(node) {
                                jalangiLabel167:
                                    while (true) {
                                        try {
                                            J$.Fe(1321, arguments.callee, this, arguments);
                                            arguments = J$.N(1329, 'arguments', arguments, 4);
                                            node = J$.N(1337, 'node', node, 4);
                                            J$.N(1345, 'current', current, 0);
                                            var current;
                                            if (J$.X1(2073, J$.C(440, J$.B(58, '!==', J$.G(1057, J$.R(1049, 'node', node, 0), 'type', 0), J$.T(1065, 'IfStatement', 21, false), 0)))) {
                                                return J$.X1(1089, J$.Rt(1081, J$.T(1073, false, 23, false)));
                                            }
                                            if (J$.X1(2081, J$.C(448, J$.B(66, '==', J$.G(1105, J$.R(1097, 'node', node, 0), 'alternate', 0), J$.T(1113, null, 25, false), 0)))) {
                                                return J$.X1(1137, J$.Rt(1129, J$.T(1121, false, 23, false)));
                                            }
                                            J$.X1(1169, current = J$.W(1161, 'current', J$.G(1153, J$.R(1145, 'node', node, 0), 'consequent', 0), current, 0));
                                            do {
                                                if (J$.X1(2097, J$.C(464, J$.B(74, '===', J$.G(1185, J$.R(1177, 'current', current, 0), 'type', 0), J$.T(1193, 'IfStatement', 21, false), 0)))) {
                                                    if (J$.X1(2089, J$.C(456, J$.B(82, '==', J$.G(1209, J$.R(1201, 'current', current, 0), 'alternate', 0), J$.T(1217, null, 25, false), 0)))) {
                                                        return J$.X1(1241, J$.Rt(1233, J$.T(1225, true, 23, false)));
                                                    }
                                                }
                                                J$.X1(1281, current = J$.W(1273, 'current', J$.F(1265, J$.R(1249, 'trailingStatement', trailingStatement, 0), 0)(J$.R(1257, 'current', current, 0)), current, 0));
                                            } while (J$.X1(2105, J$.C(472, J$.R(1289, 'current', current, 0))));
                                            return J$.X1(1313, J$.Rt(1305, J$.T(1297, false, 23, false)));
                                        } catch (J$e) {
                                            J$.Ex(2113, J$e);
                                        } finally {
                                            if (J$.Fr(2121))
                                                continue jalangiLabel167;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(1441, 'arguments', arguments, 4);
                            isExpression = J$.N(1457, 'isExpression', J$.T(1449, isExpression, 12, false, 257), 0);
                            isIterationStatement = J$.N(1473, 'isIterationStatement', J$.T(1465, isIterationStatement, 12, false, 417), 0);
                            isStatement = J$.N(1489, 'isStatement', J$.T(1481, isStatement, 12, false, 689), 0);
                            isSourceElement = J$.N(1505, 'isSourceElement', J$.T(1497, isSourceElement, 12, false, 793), 0);
                            trailingStatement = J$.N(1521, 'trailingStatement', J$.T(1513, trailingStatement, 12, false, 1025), 0);
                            isProblematicIfStatement = J$.N(1537, 'isProblematicIfStatement', J$.T(1529, isProblematicIfStatement, 12, false, 1321), 0);
                            J$.X1(17, J$.T(9, 'use strict', 21, false));
                            J$.X1(1425, J$.P(1417, J$.R(1353, 'module', module, 2), 'exports', J$.T(1409, {
                                isExpression: J$.R(1361, 'isExpression', isExpression, 0),
                                isStatement: J$.R(1369, 'isStatement', isStatement, 0),
                                isIterationStatement: J$.R(1377, 'isIterationStatement', isIterationStatement, 0),
                                isSourceElement: J$.R(1385, 'isSourceElement', isSourceElement, 0),
                                isProblematicIfStatement: J$.R(1393, 'isProblematicIfStatement', isProblematicIfStatement, 0),
                                trailingStatement: J$.R(1401, 'trailingStatement', trailingStatement, 0)
                            }, 11, false), 0));
                        } catch (J$e) {
                            J$.Ex(2129, J$e);
                        } finally {
                            if (J$.Fr(2137))
                                continue jalangiLabel168;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1433), 0)());
        } catch (J$e) {
            J$.Ex(2145, J$e);
        } finally {
            if (J$.Sr(2153)) {
                J$.L();
                continue jalangiLabel169;
            } else {
                J$.L();
                break jalangiLabel169;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
