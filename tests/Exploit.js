var path = require('path');
var utils = require(path.resolve(__dirname, "Utils"));
var configs = require(path.resolve(__dirname, "configs.json"))
var esprima = require("esprima");
var escodegen = require("escodegen");
var estraverse = require("estraverse");
var fs = require('fs');
const {spawn, spawnSync}  = require('child_process');

//generate tasks with absolute path
var tasks = [];
var file_list = [];

for (var i = 0; i < configs.length; i++) {
    configs[i].projPath = path.resolve(__dirname, configs[i].projPath)
    if (configs[i].enable)
        tasks.push(configs[i]);
}

function generate_testcase(task){
    var test_file = task.instrFiles[0];
    var json_path = path.resolve(__dirname, '../outputs/hidden_attr/' + test_file.substring(0, test_file.length-3)+ ".json");
    var hipar_list = JSON.parse(fs.readFileSync(json_path));

    var testcase_path = path.resolve(__dirname, task.projPath + "/" + test_file);

    rewrite(testcase_path, "ori", "skip");

    for(var key in hipar_list){
        if(key == "R0ot")
            for(var prop in hipar_list[key]){
                var arr = prop.split(".");
                var num_flag = false;

                for(var i in arr){
                    var n = Number(arr[i]);
                    if(!isNaN(n)){
                        num_flag = true;
                    }
                }
                if(num_flag)
                    break;
                rewrite(testcase_path, prop, "1");
                rewrite(testcase_path, prop, "true");
                rewrite(testcase_path, prop, '\"Lynx\"');
            }
        else
            for(var prop in hipar_list[key]){
                var arr = prop.split(".");
                var num_flag = false;

                for(var i in arr){
                    var n = Number(arr[i]);
                    if(!isNaN(n)){
                        num_flag = true;
                    }
                }
                if(num_flag)
                    break;

                rewrite(testcase_path, key + "." + prop, "1");
                rewrite(testcase_path, key + "." + prop,"true");
                rewrite(testcase_path, key + "." + prop, "\"Lynx\"");

            }
    }

    if(tasks.length > 0)
        generate_testcase(tasks.shift());
}


var prorotype_prop = ["constructor", "hasOwnProperty"];
var func_prop = ["hasOwnProperty", "toString", "valueOf", "forEach", "indexOf", "charCodeAt", "toJSON", "toDateString"];

var rewrite = function(file_path, hipar_key, hipar_value){
    var content = fs.readFileSync(file_path, 'utf-8');
    var ast = esprima.parse(content, {loc:true});

    ast.body.unshift(esprima.parse('var S$ = require(\"S$\");'));

    var hipar_code = "";
    if(hipar_key != "ori" || hipar_value != "skip"){
        var arr = hipar_key.split('.');
        if(arr.length == 1){
            if(func_prop.indexOf(hipar_key) != -1){
                hipar_code = "var Lynx_hipar = S$.symbol(\"" + hipar_key + "\", " + hipar_value + ");\n"
                    + "function Lynx_hipar_func(){return Lynx_hipar;}"
                    + "Lynx_input." + hipar_key + "= Lynx_hipar_func;";
            } else
                hipar_code = "var Lynx_hipar = S$.symbol(\"" + hipar_key + "\", " + hipar_value + ");\n"
                    + "Lynx_input." + hipar_key + "= Lynx_hipar;";
        }
        else{
            var hipar_obj = "{\"" + hipar_key.substr(hipar_key.indexOf('.')+1);
            hipar_obj = hipar_obj.replace(/\./g , '":{"');

            if(func_prop.indexOf(hipar_key) != -1)
                hipar_obj = hipar_obj + '": Lynx_hipar_func';
            else
                hipar_obj = hipar_obj + '": Lynx_hipar';

            for(var i in arr)
                hipar_obj = hipar_obj + "}";
            hipar_obj = hipar_obj.substring(NaN, hipar_obj.length-1);

            if(func_prop.indexOf(hipar_key) != -1)
                hipar_code = "var Lynx_hipar = S$.symbol(\"" + hipar_key + "\", " + hipar_value + ");\n"
                    + "function Lynx_hipar_func(){return Lynx_hipar;}"
                    + "Lynx_input." + arr[0] + "=" + hipar_obj;
            else
                hipar_code = "var Lynx_hipar = S$.symbol(\"" + hipar_key + "\", " + hipar_value + ");\n"
                    + "Lynx_input." + arr[0] + "=" + hipar_obj;
        }
    }

    estraverse.replace(ast, {
        leave: function(node, parent){
            if(node.type === "ExpressionStatement" && node.expression.type === "CallExpression"){
                if(node.expression.callee.type === "MemberExpression" && node.expression.callee.property != undefined && node.expression.callee.property.name === "entry"){
                    var func = node.expression.arguments[0];
                    var args = node.expression.arguments.slice(1);

                    //node.expression.callee = {"type":"Identifier","name": func.name};
                    //node.expression.arguments = args;

                    var hipar_ast = esprima.parse(hipar_code);
                    var test_ast = esprima.parse(func.name + "(a);");
                    test_ast.body[0].expression.arguments = args;
                    hipar_ast.body = hipar_ast.body.concat(test_ast.body);

                    return hipar_ast; 
                }
            }
        }
    });

    var new_code = escodegen.generate(ast);
    var new_file = file_path.substring(0, file_path.length - 3) + "_" + hipar_key + "_" + hipar_value.replace(/"/g, '') + ".js";
    file_list.push(new_file)
    fs.writeFileSync(new_file, new_code);
}

function analyze(task){
    console.log("[!] Analysis Result:");

    var exploit_output_root = "../outputs/exploit/";
    console.log("Baseline:");
    var bl = JSON.parse(fs.readFileSync(exploit_output_root + task.testName + "/" + file_list[0].split("/").pop() + "0"));
    try{
        for(var i in bl["I2"]){
            console.log("    Location: " + bl["I2"][i].location);
            console.log("    Return result: " + JSON.stringify(bl["I2"][i].result));
        }
    } catch (error) {
        console.log("Baseline error.");
        return;
    }

    for(var index in file_list){
        if(index == 0)
            continue;

        var vul = false;
        var path = exploit_output_root + task.testName + "/" + file_list[index].split("/").pop();
        for(var i = 0; i<99; i++){
            if(fs.existsSync(path + i)){
                var result = JSON.parse(fs.readFileSync(path + i));

                for(var x in result["C1"]){
                    if(result["C1"][x]["location"].indexOf(file_list[index]) != -1)
                        continue;
                    if(vul == false){
                        var file_name_arr = file_list[index].split("_");
                        file_name_arr.pop();
                        console.log("\nHidden Property Name" + ": " + file_name_arr.pop());
                        vul = true;
                    }

                    console.log("    Sink C1 detected.");
                    console.log("    method_name: " + result["C1"][x]["method_name"]);
                    console.log("    location: " + result["C1"][x]["location"]);
                }
                for(var x in result["C2"]){
                    if(result["C2"][x]["location"].indexOf(file_list[index]) != -1)
                        continue;
                    if(result["C2"][x]["location"].indexOf(task.testName) == -1)
                        continue;
                    if(vul == false){
                        var file_name_arr = file_list[index].split("_");
                        file_name_arr.pop();
                        console.log("\nHidden Property Name" + ": " + file_name_arr.pop());
                        vul = true;
                    }

                    console.log("    Sink C2 detected.");
                    console.log("    method_name: " + result["C2"][x]["method_name"]);
                    console.log("    location: " + result["C2"][x]["location"]);
                }

                for(var x in result["I1"]){
                    if(result["I1"][x]["location"].indexOf(file_list[index]) != -1)
                        continue;
                    if(vul == false){
                        var file_name_arr = file_list[index].split("_");
                        file_name_arr.pop();
                        console.log("\nHidden Property Name" + ": " + file_name_arr.pop());
                        vul = true;
                    }

                    console.log("    Sink I1 detected.");
                    console.log("    iid: " + result["I1"][x]["iid"]);
                    console.log("    critical_property: " + result["I1"][x]["critical_property"]);
                    console.log("    location: " + result["I1"][x]["location"]);
                }

                for(var x in result["I2"]){
                    for(var y in bl["I2"]){
                        if(result["I2"][x].return_at == bl["I2"][y].return_at && result["I2"][x].result != bl["I2"][y].result){
                            if(vul == false){
                                var file_name_arr = file_list[index].split("_");
                                file_name_arr.pop();
                                console.log("\nHidden Property Name" + ": " + file_name_arr.pop());
                                vul = true;
                            }

                            console.log("    Sink I2 detected.");
                            console.log("    Return Location: " + result["I2"][x].location);
                            console.log("    Return result: " + result["I2"][x].result);
                        }
                    }
                }

                for(var x in result["A1"]){
                    if(result["A1"][x]["location"].indexOf(file_list[index]) != -1)
                        continue;
                    if(vul == false){
                        var file_name_arr = file_list[index].split("_");
                        file_name_arr.pop();
                        console.log("\nHidden Property Name" + ": " + file_name_arr.pop());
                        vul = true;
                    }
                    console.log(file_list[index]);

                    console.log("    Sink A1 detected.");
                    console.log("    global_variable: " + result["A1"][x]["global_variable"]);
                    console.log("    location: " + result["A1"][x]["location"]);
                }

                for(var x in result["A2"]){
                    if(vul == false){
                        var file_name_arr = file_list[index].split("_");
                        file_name_arr.pop();
                        console.log("\nHidden Property Name" + ": " + file_name_arr.pop());
                        vul = true;
                    }

                    console.log("    Sink A2 detected.");
                    console.log("    type: " + result["A2"][x]["type"]);
                }

            } else {
                break;
            }
        }
    }
}

function delFiles(path){
    let files = [];
    if(fs.existsSync(path)){
        files = fs.readdirSync(path);
        files.forEach((file, index) => {
            let curPath = path + "/" + file;
            if(fs.statSync(curPath).isDirectory()){
                delDir(curPath);
            } else {
                fs.unlinkSync(curPath);
            }
        });
    }   
}

function clean(task){
    let files = [];
    if(fs.existsSync(task.projPath)){
        files = fs.readdirSync(task.projPath);
        files.forEach((file, index) => {
            let curPath = task.projPath + "/" + file;
            if(fs.statSync(curPath).isDirectory()){
                clean(curPath);
            } else if(curPath.indexOf("jalangi") != -1) {
                fs.unlinkSync(curPath);
            }
        });
    }
}

function exploit(task){
    file_list = [];
    console.log("Generating scripts");
    generate_testcase(task);
    console.log(file_list);

    console.log("\nExploiting");
    process.chdir("../exploitable/ExpoSE");

    var exploit_output_root = "../../outputs/exploit/";
    if(!fs.existsSync(exploit_output_root + task.testName))
        fs.mkdirSync(exploit_output_root + task.testName);
    else
        delFiles(exploit_output_root + task.testName);

    for(var file in file_list){
        console.log(file_list[file]);

        var spawnObj;
        spawnObj = spawnSync('./expoSE', [file_list[file]], {encoding: 'utf-8'});                

        console.log(spawnObj.stdout);

        var pa = fs.readdirSync(exploit_output_root);
        pa.forEach(function(ele, index){
            var info = fs.statSync(exploit_output_root + ele);
            if(info.isFile()){
                fs.renameSync(exploit_output_root + ele, exploit_output_root + task.testName + "/" + file_list[file].split("/").pop() + ele.substr(ele.length-1,1));
            }
        });
    }
    process.chdir("../../tests");
    analyze(task);

    clean(task);

    for(var i in file_list){
        fs.unlinkSync(file_list[i]);
    }
    file_list = [];

}

exploit(tasks.shift());
