/*
 * Lynx sink monitor
 */
const path = require('path');
const fs = require('fs');
const ConcolicValue = require('./ExpoSE/Analyser/bin/Values/WrappedValue.js').ConcolicValue;

J$.analysis = {};

var native_func = {"json_stringify": JSON.stringify,
    "Str_indexOf": String.prototype.indexOf,
    "RegExp_test": RegExp.prototype.test,
    "Obj_hasOwnProperty": Object.hasOwnProperty,
    "Obj_values": Object.values,
    "Str_slice": String.prototype.slice,
    "Str_split": String.prototype.split,
    "Arr_indexOf": Array.prototype.indexOf,
    "Func_toString": Function.prototype.toString
};

const mysql = require('mysql');
var connection = mysql.createConnection({host: 'example.org', user: 'bo', password: 'secret'});
var pool  = mysql.createPool({connectionLimit: 10, host: 'example.org', user: 'bob', password: 'secret', database: 'my_db'});
var sensitive_db_opearations = {"Connection_Connect": connection.connect.name,
    "Connection_Query": connection.query.name,
    "Pool_Query": pool.query.name
};

var sensitive_fs_operations = {"FS_appendFile": fs.appendFile.name,
    "FS_appendFileSync": fs.appendFileSync.name,
    "FS_chown": fs.chown.name,
    "FS_chownSync": fs.chownSync.name,
    "FS_copyFile": fs.copyFile.name,
    "FS_copyFileSync": fs.copyFileSync.name,
    "FS_read": fs.read.name,
    "FS_readSync": fs.readSync.name,
    "FS_write": fs.write.name,
    "FS_writeFile": fs.writeFile.name,
    "FS_writeSync": fs.writeSync.name
};

var code_execution_api = {"runInContext": "runInContext",
    "saferEval": "SaferEval",
    "spawn": "spawn",
    "spawnSync": "spawnSync"
};

var sensitive_properties = ["constructor"];

(function (sandbox) {
    function ControlFlowMon() {
        var iidToLocation = sandbox.iidToLocation;
        var log_buffer = {"C1": [], "C2": [], "I1": [], "I2": [], "A1": [], "A2": [], "fs_operations": [], "log": []};
        var output_path = path.resolve(__dirname, "../outputs/exploit/trace");
        var funcIid_to_script = {};

        var entry_script = "none";

        function write_log(log_file) {
            var file_path = log_file;
            for(var i = 0; i<99; i++){
                if(fs.existsSync(log_file+i))
                    continue;
                else{
                    file_path = file_path + i;
                    break;
                }
            }

            var data = native_func["json_stringify"](log_buffer);
            try {
                fs.writeFileSync(file_path, data);
            } catch (err) {
                console.log("[Lynx] Cannot log trace ", err);
            } 
        }

        function getKeyByValue(obj, value){
            for(var k in obj){
                if(native_func["Obj_hasOwnProperty"].apply(obj, [k]) && obj[k] == value)
                    return k;
            }
        }

        this.invokeFunPre = function (iid, f, base, args, isConstructor, isMethod, functionIid, functionSid) {
            var script_name_f = funcIid_to_script[functionIid];

            var script_name = "caller";
            var giid = J$.getGlobalIID(iid);
            var vlocation = iidToLocation(giid);
            if(native_func["RegExp_test"].apply(/.*:\d*:\d*:\d*:\d*/, [vlocation])){
                var script_name_str = native_func["Str_slice"].call(vlocation, [1,-1]);
                script_name = native_func["Str_split"].call(script_name_str, [":"])[0];
            }


            var sym_flag = false;
            for(var i in args){
                if(!!ConcolicValue.getSymbolic(args[i])){
                    sym_flag = true;
                    break;
                }
            }

            var vals = native_func["Obj_values"](sensitive_fs_operations);
            //log_buffer["log"].push({"iid": iid, "fname": f.name, "sym_flag": sym_flag, "f": native_func["Arr_indexOf"].apply(vals, [f.name])});

            if(native_func["Arr_indexOf"].apply(vals, [f.name]) != -1 && sym_flag){
                log_buffer["C2"].push({
                                      "iid": iid,
                                      "location": iidToLocation(J$.getGlobalIID(iid))
                })
            }

            vals = native_func["Obj_values"](sensitive_db_opearations);
            if(native_func["Arr_indexOf"].apply(vals, [f.name]) != -1 && sym_flag){
                log_buffer["C1"].push({
                                      "iid": iid,
                                      "method_name": getKeyByValue(sensitive_db_opearations, f),
                                      "location": iidToLocation(J$.getGlobalIID(iid))
                })
            }

            vals = native_func["Obj_values"](code_execution_api);
            if(native_func["Arr_indexOf"].apply(vals, [f.name]) != -1 && sym_flag){
                log_buffer["I1"].push({
                                      "iid": iid,
                                      "critical_property": f.name,
                                      "location": iidToLocation(J$.getGlobalIID(iid))
                })
            }

            return {f: f, base: base, args: args, skip: false};
        };

        this.invokeFun = function (iid, f, base, args, result, isConstructor, isMethod, functionIid, functionSid) {
            return {result: result};
        };

        this.write = function (iid, name, val, lhs, isGlobal, isScriptLocal) {
            if(!!ConcolicValue.getSymbolic(val) && (isScriptLocal || isGlobal)){
                log_buffer["A1"].push({
                                      "iid": iid,
                                      "global_variable": name,
                                      "location": iidToLocation(J$.getGlobalIID(iid))
                });
            }

            if(name && name === "Lynx_ret"){
                log_buffer["I2"].push({
                                      "iid": iid,
                                      "return_at": J$.getGlobalIID(iid),
                                      "location": iidToLocation(J$.getGlobalIID(iid)),
                                      "result": native_func["json_stringify"](val).replace(/"/g, "'")
                });
            }

            return {result: val};          
        };

        this.putFieldPre = function (iid, base, offset, val, isComputed, isOpAssign) {
            if(!!ConcolicValue.getSymbolic(val) && sensitive_properties.indexOf(offset) != -1){
                log_buffer["I1"].push({
                                      "iid": iid,
                                      "critical_property": offset,
                                      "location": iidToLocation(J$.getGlobalIID(iid))
                })
            }
            return {base: base, offset: offset, val: val, skip: false};          
        };

        this.functionEnter = function (iid, f, dis, args) {
            var giid = J$.getGlobalIID(iid)
            var vlocation = iidToLocation(giid);
            var arr = native_func["Str_slice"].call(vlocation, [1,-1]);
            funcIid_to_script[iid] = native_func["Str_split"].call(arr, [":"])[0];
        };

        this.literal = function (iid, val, hasGetterSetter) {
            var script_name = "none";
            var giid = J$.getGlobalIID(iid);
            var vlocation = iidToLocation(giid);
            if(native_func["RegExp_test"].apply(/.*:\d*:\d*:\d*:\d*/, [vlocation])){
                var script_name_arr = native_func["Str_slice"].call(vlocation, [1,-1])
                script_name = native_func["Str_split"].call(script_name_arr, [":"])[0];
            }

            if(entry_script == "none" && script_name != "none"){
                entry_script = script_name;
            }
            return {result: val};
        };

        this.conditonal = function (iid, result) {
            if(!!ConcolicValue.getSymbolic(result)){
                log_buffer["A2"].push({
                                      "location": iidToLocation(J$.getGlobalIID(iid))
                });
            }
        }

        this.endExecution = function(){
            write_log(output_path);
        }

    }

    sandbox.analysis = new ControlFlowMon();

})(J$);
